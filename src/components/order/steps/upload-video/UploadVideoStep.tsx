import React, { useState, useRef, useEffect } from "react";
import { toast } from "@/components/ui/use-toast";
import Icon from "@/components/ui/icon";
import { UploadVideoStepProps } from "./types";
import { VideoStorageUtils, uploadFileWithProgress } from "./utils";
import { VideoUploadService } from "./services";
import { 
  DropZone, 
  UploadProgress, 
  VideoInfo, 
  VideoActionButtons, 
  VideoRecommendations 
} from "./components";

/**
 * –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ
 */
const UploadVideoStep: React.FC<UploadVideoStepProps> = ({
  videoFile,
  setVideoFile,
  transactionId,
  onUploadSuccess
}) => {
  const [isDragging, setIsDragging] = useState(false);
  const fileInputRef = useRef<HTMLInputElement>(null);
  const [videoSrc, setVideoSrc] = useState<string | null>(null);
  const [isLoading, setIsLoading] = useState(false);
  const [isPreparingUpload, setIsPreparingUpload] = useState(false);
  const [uploadProgress, setUploadProgress] = useState(0);
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–ª–∞–≥ –∑–∞–≥—Ä—É–∑–∫–∏, –ø—Ä–æ–≤–µ—Ä—è—è localStorage –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  const [isVideoUploaded, setIsVideoUploaded] = useState(VideoStorageUtils.getUploadStatus);

  //////////////////////////////////
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è —Ñ–∞–π–ª–æ–≤
  //////////////////////////////////
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞ –∏–∑ –¥–∏–∞–ª–æ–≥–∞
  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    console.log("üìä File selection triggered", e.target.files);
    const files = e.target.files;
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ –≤–∏–¥–µ–æ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –Ω–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞
    if (isVideoUploaded) {
      console.log("üìä Resetting upload state for new file");
      setIsVideoUploaded(false);
      VideoStorageUtils.setUploadStatus(false);
    }
    
    if (files && files[0]) {
      console.log("üìä File selected:", files[0].name);
      // Create URL for video preview
      const fileUrl = URL.createObjectURL(files[0]);
      setVideoSrc(fileUrl);
      setVideoFile(files[0]);
      
      // Start upload automatically
      setTimeout(() => {
        console.log("üìä Starting upload from file selection handler");
        uploadVideo();
      }, 100);
    } else {
      console.log("üìä No file selected in file input");
    }
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ Drag & Drop
  const handleDragOver = (e: React.DragEvent<HTMLDivElement>) => {
    e.preventDefault();
    setIsDragging(true);
  };

  const handleDragLeave = () => {
    setIsDragging(false);
  };

  const handleDrop = (e: React.DragEvent<HTMLDivElement>) => {
    e.preventDefault();
    setIsDragging(false);
    console.log("üìä File dropped", e.dataTransfer.files);

    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ –≤–∏–¥–µ–æ –ø—Ä–∏ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞
    if (isVideoUploaded) {
      console.log("üìä Resetting upload state for newly dropped file");
      setIsVideoUploaded(false);
      VideoStorageUtils.setUploadStatus(false);
    }

    const files = e.dataTransfer.files;
    if (files && files[0]) {
      console.log("üìä Checking dropped file:", files[0].name, files[0].type);
      // Check if file is a video
      if (files[0].type.startsWith("video/")) {
        console.log("üìä Video file dropped:", files[0].name);
        const fileUrl = URL.createObjectURL(files[0]);
        setVideoSrc(fileUrl);
        setVideoFile(files[0]);
        
        // Start upload automatically
        setTimeout(() => {
          console.log("üìä Starting upload from drop handler");
          uploadVideo();
        }, 100);
      } else {
        console.log("üìä Dropped file is not a video:", files[0].type);
        toast({
          title: "–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ñ–æ—Ä–º–∞—Ç",
          description: "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥–µ–æ—Ñ–∞–π–ª",
          variant: "destructive",
        });
      }
    } else {
      console.log("üìä No file in drop event");
    }
  };

  // –û—á–∏—Å—Ç–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
  const clearSelection = () => {
    if (videoSrc) {
      URL.revokeObjectURL(videoSrc);
    }
    setVideoSrc(null);
    setVideoFile(null);
    if (fileInputRef.current) {
      fileInputRef.current.value = "";
    }
    setUploadProgress(0);
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ –∏ —É–¥–∞–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ localStorage
    setIsVideoUploaded(false);
    VideoStorageUtils.clearVideoInfo();
  };

  // –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ
  const uploadVideo = async () => {
    console.log("üìä uploadVideo called, videoFile status:", videoFile ? "Selected" : "Not selected");
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–ª–∞–≥ –≤ localStorage
    const isUploadedInStorage = VideoStorageUtils.getUploadStatus();
    console.log("üìä isVideoUploaded in localStorage:", isUploadedInStorage);
    
    // –ï—Å–ª–∏ –≤–∏–¥–µ–æ —É–∂–µ –æ—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ - –Ω–µ –∑–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω–æ
    if (isVideoUploaded || isUploadedInStorage) {
      console.log("üìä Video is already marked as uploaded, skipping upload");
      // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å localStorage
      if (!isVideoUploaded && isUploadedInStorage) {
        setIsVideoUploaded(true);
      }
      toast({
        title: "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è",
        description: "–í–∏–¥–µ–æ —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –∏ –≥–æ—Ç–æ–≤–æ –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ",
      });
      return;
    }
    
    // –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    const videoInfo = VideoStorageUtils.getVideoInfo();
    
    // –ï—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –≤–∏–¥–µ–æ, –Ω–æ –Ω–µ—Ç —Ñ–∞–π–ª–∞ - –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    if (videoInfo.videoId && videoInfo.fileKey && !videoFile) {
      console.log("üìä Found saved video info in localStorage, marking as uploaded");
      setIsVideoUploaded(true);
      VideoStorageUtils.setUploadStatus(true);
      return;
    }
    
    if (!videoFile) {
      console.error("üìä No video file selected when uploadVideo was called!");
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞ –≤ input –∫–∞–∫ —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç
      const fileInput = fileInputRef.current;
      if (fileInput && fileInput.files && fileInput.files[0]) {
        console.log("üìä Found file in file input, using it as fallback");
        const file = fileInput.files[0];
        setVideoFile(file);
        
        // –ü–æ–≤—Ç–æ—Ä—è–µ–º –ø–æ–ø—ã—Ç–∫—É –∑–∞–≥—Ä—É–∑–∫–∏
        setTimeout(() => {
          console.log("üìä Retrying upload with file from input:", file.name);
          uploadVideo();
        }, 100);
        return;
      }
      
      // –ï—Å–ª–∏ –µ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ, –Ω–æ –Ω–µ—Ç —Ñ–∞–π–ª–∞ - –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
      if (isUploadedInStorage || (videoInfo.videoId && videoInfo.fileKey)) {
        console.log("üìä No file, but upload data exists, skipping error");
        setIsVideoUploaded(true);
        return;
      }
      
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: "–ù–µ –≤—ã–±—Ä–∞–Ω —Ñ–∞–π–ª",
        variant: "destructive",
      });
      return;
    }

    console.log("üìä Starting upload for:", videoFile.name, "Size:", videoFile.size, "Type:", videoFile.type);
    setIsLoading(true);
    setIsPreparingUpload(true);
    setUploadProgress(0);

    try {
      let videoId: number, fileKey: string;
      
      // –î–µ–º–æ-—Ä–µ–∂–∏–º (–æ—Ç–∫–ª—é—á—ë–Ω)
      const FORCE_DEMO_MODE = false;

      // –ó–∞–≥—Ä—É–∑–∫–∞ –≤ –¥–µ–º–æ-—Ä–µ–∂–∏–º–µ –∏–ª–∏ –¥–ª—è –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      if (FORCE_DEMO_MODE) {
        console.log("üìä Running in demo mode");
        const result = await VideoUploadService.uploadDemoVideo(videoFile);
        videoId = result.videoId;
        fileKey = result.fileKey;
      } else {
        console.log("üìä Running real upload with presigned URL");
        
        // –®–∞–≥ 1: –ü–æ–ª—É—á–∞–µ–º presigned URL
        const { presignedUrl, fileKey: key, videoId: id } = await VideoUploadService.getPresignedUrl(
          videoFile, 
          transactionId
        );
        
        fileKey = key;
        videoId = id;
        
        // –®–∞–≥ 2: –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –Ω–∞–ø—Ä—è–º—É—é –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
        console.log("üìä Starting direct upload to storage with presigned URL");
        setIsPreparingUpload(false);
        
        await uploadFileWithProgress(
          videoFile, 
          presignedUrl, 
          (progress) => setUploadProgress(progress)
        );
        
        console.log("üìä Direct upload successful");
      }
      
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å 100%
      setUploadProgress(100);
      setIsPreparingUpload(false);
      
      // –û—Ç–º–µ—á–∞–µ–º —É—Å–ø–µ—à–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
      setIsVideoUploaded(true);
      VideoStorageUtils.saveVideoInfo(videoId, fileKey, transactionId, videoFile.name);
      
      toast({
        title: "–£—Å–ø–µ—Ö",
        description: "–í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ",
      });

      // –í—ã–∑—ã–≤–∞–µ–º callback –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
      setTimeout(() => {
        if (onUploadSuccess) {
          console.log("üìä Calling onUploadSuccess with:", { videoId, fileKey });
          onUploadSuccess(videoId, fileKey);
        }
      }, 500);
    } catch (error) {
      console.error("üìä Upload error:", error);
      setIsVideoUploaded(false);
      VideoStorageUtils.setUploadStatus(false);
      
      toast({
        title: "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏",
        description: error instanceof Error ? error.message : "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–∏–¥–µ–æ",
        variant: "destructive",
      });
    } finally {
      setIsLoading(false);
      setIsPreparingUpload(false);
    }
  };

  ////////////////////
  // –≠—Ñ—Ñ–µ–∫—Ç—ã
  ////////////////////
  
  // –≠—Ñ—Ñ–µ–∫—Ç –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ñ–∞–π–ª–∞ –∏ —Ñ–ª–∞–≥–∞ –∑–∞–≥—Ä—É–∑–∫–∏
  useEffect(() => {
    console.log("üìä File state changed:", { 
      videoFile: videoFile?.name, 
      isVideoUploaded
    });
    
    // –ü—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ —Å–≤–µ—Ä—è–µ–º —Å —Ñ–ª–∞–≥–æ–º –∑–∞–≥—Ä—É–∑–∫–∏
    if (videoFile && !isVideoUploaded) {
      const videoInfo = VideoStorageUtils.getVideoInfo();
      
      if (videoInfo.fileName === videoFile.name) {
        console.log("üìä Found matching saved file name, setting uploaded state");
        setIsVideoUploaded(true);
        VideoStorageUtils.setUploadStatus(true);
      } else {
        console.log("üìä New or different file, reset upload state");
        setIsVideoUploaded(false);
        VideoStorageUtils.setUploadStatus(false);
      }
    } 
    
    // –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–∞–π–ª –∏ —Ñ–ª–∞–≥ –∑–∞–≥—Ä—É–∑–∫–∏ - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è —Ñ–∞–π–ª–∞
    if (videoFile && isVideoUploaded) {
      console.log("üìä File present and upload flag set - all good!");
      localStorage.setItem('uploadedFileName', videoFile.name);
    }
    
    // –ï—Å–ª–∏ –Ω–µ—Ç —Ñ–∞–π–ª–∞, –Ω–æ –µ—Å—Ç—å —Ñ–ª–∞–≥ –∑–∞–≥—Ä—É–∑–∫–∏ - –≤–æ–∑–≤—Ä–∞—Ç –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
    if (!videoFile && isVideoUploaded) {
      console.log("üìä No file but upload flag set - returned after successful upload");
    }
  }, [videoFile, isVideoUploaded]);
  
  // –≠—Ñ—Ñ–µ–∫—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–ª–∞–≥–∞ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  useEffect(() => {
    console.log("üìä Component mounted, checking flags");
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ —Ñ–ª–∞–≥ –∑–∞–≥—Ä—É–∑–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ localStorage
    if (!videoFile && VideoStorageUtils.getUploadStatus()) {
      console.log("üìä No file but upload flag set in localStorage");
      setIsVideoUploaded(true);
    }
  }, [videoFile]);

  // –≠—Ñ—Ñ–µ–∫—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ñ–∞–π–ª–∞
  useEffect(() => {
    console.log("üìä Auto-upload check:", { 
      videoFile: videoFile?.name, 
      transactionId, 
      isVideoUploaded,
      uploadProgress,
      isLoading
    });
    
    // –ï—Å–ª–∏ —Ñ–ª–∞–≥ –∑–∞–≥—Ä—É–∑–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ localStorage, –Ω–æ –Ω–µ—Ç —Ñ–∞–π–ª–∞
    if (!videoFile && VideoStorageUtils.getUploadStatus()) {
      console.log("üìä Video was previously uploaded according to localStorage, but no file in state");
      setIsVideoUploaded(true);
      return;
    }
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏:
    // 1. –ï—Å—Ç—å —Ñ–∞–π–ª
    // 2. –ù–µ –∏–¥–µ—Ç –∑–∞–≥—Ä—É–∑–∫–∞
    // 3. –ü—Ä–æ–≥—Ä–µ—Å—Å = 0
    // 4. –í–∏–¥–µ–æ –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ
    if (videoFile && !isLoading && uploadProgress === 0 && !isVideoUploaded) {
      const videoInfo = VideoStorageUtils.getVideoInfo();
      
      if (videoInfo.fileName === videoFile.name) {
        console.log("üìä This file has been uploaded before, not uploading again");
        setIsVideoUploaded(true);
      } else {
        console.log("üìä New file detected, starting upload automatically");
        setTimeout(() => {
          uploadVideo();
        }, 300);
      }
    }
  }, [videoFile, transactionId, isLoading, uploadProgress, isVideoUploaded]);

  // –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∞
  const hasVideoFile = !!videoFile;
  const isVideoReady = hasVideoFile || isVideoUploaded;
  
  console.log("üìä Render state:", { 
    hasVideoFile, 
    isVideoUploaded, 
    isVideoReady,
    isLoading 
  });

  return (
    <div className="fade-slide-in">
      <h2 className="text-xl font-semibold mb-6">–ó–∞–≥—Ä—É–∑–∏—Ç–µ –≤–∞—à–µ –≤–∏–¥–µ–æ</h2>

      {/* –°–∫—Ä—ã—Ç—ã–π –∏–Ω–ø—É—Ç –¥–ª—è —Ñ–∞–π–ª–∞ */}
      <input
        type="file"
        ref={fileInputRef}
        onChange={handleFileChange}
        accept="video/*"
        className="hidden"
      />

      {/* –û—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ */}
      {!isVideoReady ? (
        // –î—Ä–æ–ø–∑–æ–Ω–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ
        <DropZone 
          isDragging={isDragging}
          handleDragOver={handleDragOver}
          handleDragLeave={handleDragLeave}
          handleDrop={handleDrop}
          onClick={() => fileInputRef.current?.click()}
        />
      ) : (
        // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∏–¥–µ–æ –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å –∑–∞–≥—Ä—É–∑–∫–∏
        <div className="border rounded-lg p-6 bg-gray-50 fade-slide-in">
          {isLoading ? (
            // –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∑–∞–≥—Ä—É–∑–∫–∏
            <UploadProgress 
              isPreparingUpload={isPreparingUpload}
              uploadProgress={uploadProgress}
            />
          ) : (
            <>
              {/* –®–∞–ø–∫–∞ —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º –∏ –∫–Ω–æ–ø–∫–æ–π —É–¥–∞–ª–µ–Ω–∏—è */}
              <div className="flex justify-between items-center mb-4">
                <h3 className="font-medium text-lg">–í—ã–±—Ä–∞–Ω–Ω–æ–µ –≤–∏–¥–µ–æ</h3>
                <button
                  onClick={clearSelection}
                  className="text-gray-500 hover:text-red-500 transition-colors"
                >
                  <Icon name="X" size={20} />
                </button>
              </div>

              {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∏–¥–µ–æ */}
              <VideoInfo 
                videoFile={videoFile} 
                isVideoUploaded={isVideoUploaded}
                uploadVideo={uploadVideo}
              />

              {/* –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π */}
              <VideoActionButtons 
                isLoading={isLoading}
                isVideoUploaded={isVideoUploaded}
                uploadProgress={uploadProgress}
                videoFile={videoFile}
                uploadVideo={uploadVideo}
                clearSelection={clearSelection}
                fileInputRef={fileInputRef}
              />
            </>
          )}
        </div>
      )}

      {/* –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ */}
      <VideoRecommendations />
    </div>
  );
};

export default UploadVideoStep;