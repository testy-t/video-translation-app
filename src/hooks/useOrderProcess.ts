import { useState, useEffect } from "react";
import { useNavigate, useLocation } from "react-router-dom";
import { supabase } from "@/integrations/supabase";
import { toast } from "@/components/ui/use-toast";

/**
 * Hook for managing the order process
 */
export const useOrderProcess = () => {
  const navigate = useNavigate();
  const location = useLocation();
  
  // Get initial step from URL if available
  const getInitialStep = () => {
    const params = new URLSearchParams(location.search);
    const step = params.get("step");
    return step ? parseInt(step) : 0;
  };
  
  const [currentStep, setCurrentStep] = useState(getInitialStep());
  const [videoFile, setVideoFile] = useState<File | null>(null);
  const [selectedLanguage, setSelectedLanguage] = useState("");
  const [orderNumber, setOrderNumber] = useState("");
  const [transactionId, setTransactionId] = useState<string | null>(null);
  // Initialize state with values from localStorage if available
  const [videoId, setVideoId] = useState<number | null>(() => {
    const savedId = localStorage.getItem('uploadedVideoId');
    return savedId ? parseInt(savedId, 10) : null;
  });
  const [fileKey, setFileKey] = useState<string | null>(() => 
    localStorage.getItem('uploadedFileKey')
  );
  const [isUploading, setIsUploading] = useState(false);
  const [videoDuration, setVideoDuration] = useState<number>(() => {
    const savedDuration = localStorage.getItem('videoDuration');
    return savedDuration ? parseInt(savedDuration) : 180; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 3 –º–∏–Ω—É—Ç—ã
  });
  
  // Process steps
  const steps = [
    { id: "upload", title: "–ó–∞–≥—Ä—É–∑–∏—Ç–µ –≤–∏–¥–µ–æ", icon: "Upload" },
    { id: "language", title: "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫", icon: "Languages" },
    { id: "payment", title: "–û–ø–ª–∞—Ç–∏—Ç–µ", icon: "CreditCard" },
    { id: "result", title: "–ü–æ–ª—É—á–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç", icon: "Download" },
  ];

  // Update URL when step changes
  useEffect(() => {
    navigate(`/order?step=${currentStep}`, { replace: true });
  }, [currentStep, navigate]);
  
  // Create transaction and restore data when component mounts
  useEffect(() => {
    const setupOrderProcess = async () => {
      try {
        // –ï—Å–ª–∏ –º—ã –ø–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —à–∞–≥ 0 (–∑–∞–≥—Ä—É–∑–∫–∞ –≤–∏–¥–µ–æ) –∏–∑ —à–∞–≥–∞ –æ–ø–ª–∞—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, "—Å–æ–∑–¥–∞—Ç—å –µ—â–µ –æ–¥–Ω–æ –≤–∏–¥–µ–æ"),
        // —Ç–æ –æ—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –æ –≤–∏–¥–µ–æ
        const params = new URLSearchParams(location.search);
        const step = parseInt(params.get("step") || "0");
        const prevStep = parseInt(sessionStorage.getItem("previousStep") || "0");
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π —à–∞–≥ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        sessionStorage.setItem("previousStep", step.toString());
        
        // –ï—Å–ª–∏ –ø–µ—Ä–µ—à–ª–∏ –∫ —à–∞–≥—É –∑–∞–≥—Ä—É–∑–∫–∏ —Å —à–∞–≥–∞ –æ–ø–ª–∞—Ç—ã –∏–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ - —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ
        if (step === 0 && (prevStep === 2 || prevStep === 3)) {
          console.log("üìä Reset video data when coming back to upload step from payment or result");
          // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º VideoStorageUtils –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö
          const { default: VideoStorageUtils } = await import('@/components/order/steps/upload-video/utils/VideoStorageUtils');
          VideoStorageUtils.clearVideoInfo();
          setVideoFile(null);
          setVideoId(null);
          setFileKey(null);
          // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        } else {
          // –ü—ã—Ç–∞–µ–º—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∑–∞–∫–∞–∑–∞ –∏–∑ localStorage
          const savedVideoId = localStorage.getItem('uploadedVideoId');
          const savedFileKey = localStorage.getItem('uploadedFileKey');
          const savedTransactionId = localStorage.getItem('transactionId');
          
          // –ï—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –∑–∞–≥—Ä—É–∑–∫–µ, –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏—Ö
          if (savedVideoId && savedFileKey) {
            setVideoId(parseInt(savedVideoId));
            setFileKey(savedFileKey);
            
            // –ï—Å–ª–∏ –±—ã–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
            if (savedTransactionId) {
              setTransactionId(savedTransactionId);
              return; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
            }
          }
        }
        
        // Check if user is authenticated
        const { data: { session } } = await supabase.auth.getSession();
        
        if (session) {
          // User is authenticated, create regular transaction
          const { data, error } = await supabase
            .from('transactions')
            .insert({
              user_id: session.user.id,
              product_id: 1, // Default product ID, could be changed later
              amount: 0, // Will be updated after video analysis
              status: 'pending'
            })
            .select()
            .single();
  
          if (error) {
            throw error;
          }
  
          if (data) {
            setTransactionId(data.id);
          }
        } else {
          // User is not authenticated, create anonymous transaction
          // This is a simplified version - in a real app you might want to handle this differently
          // For demo purposes, we'll just create a "guest" transaction or use a UUID-based approach
          const guestId = 'guest-' + Math.random().toString(36).substring(2, 15);
          
          // Create a dummy transaction ID for demo purposes
          const tempTransactionId = 'temp-' + Date.now().toString();
          setTransactionId(tempTransactionId);
          
          console.log("Created temporary transaction for guest user", tempTransactionId);
        }
      } catch (error) {
        console.error("Error setting up order process:", error);
        toast({
          title: "–û—à–∏–±–∫–∞",
          description: "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
          variant: "destructive",
        });
      }
    };

    setupOrderProcess();
  }, []);
  
  const goToNextStep = () => {
    if (currentStep < steps.length - 1) {
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ—Ö–æ–¥–æ–º —Å–æ —à–∞–≥–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ –Ω–∞ —à–∞–≥ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
      if (currentStep === 0) {
        const isUploaded = localStorage.getItem('isVideoUploaded') === 'true';
        const hasVideoId = !!localStorage.getItem('uploadedVideoId');
        const hasFileKey = !!localStorage.getItem('uploadedFileKey');
        
        console.log("Navigation: checking video data before proceeding:", { 
          isUploaded, hasVideoId, hasFileKey 
        });
        
        // –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–º –≤–∏–¥–µ–æ, –Ω–µ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –¥–∞–ª—å—à–µ
        if (!isUploaded && !(hasVideoId && hasFileKey)) {
          console.error("Cannot proceed - no video data available");
          toast({
            title: "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤–∏–¥–µ–æ",
            description: "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ –≤–∏–¥–µ–æ –ø–µ—Ä–µ–¥ —Ç–µ–º, –∫–∞–∫ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å",
            variant: "destructive",
          });
          return;
        }
      }
      
      setCurrentStep(currentStep + 1);
      window.scrollTo(0, 0); // Scroll to top when changing steps
    }
  };

  const goToPreviousStep = () => {
    if (currentStep > 0) {
      setCurrentStep(currentStep - 1);
      window.scrollTo(0, 0);
    }
  };

  // Handle successful video upload
  const handleUploadSuccess = (videoId: number, fileKey: string, duration?: number) => {
    setVideoId(videoId);
    setFileKey(fileKey);
    
    // –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å, –æ–±–Ω–æ–≤–ª—è–µ–º –µ–µ
    if (duration) {
      setVideoDuration(duration);
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ –≤ localStorage –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    try {
      localStorage.setItem('uploadedVideoId', videoId.toString());
      localStorage.setItem('uploadedFileKey', fileKey);
      localStorage.setItem('transactionId', transactionId || '');
      localStorage.setItem('isVideoUploaded', 'true'); // Ensure this flag is always set
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–∏–¥–µ–æ
      if (duration) {
        localStorage.setItem('videoDuration', duration.toString());
      }
    } catch (e) {
      console.error("Failed to save video info to localStorage:", e);
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ—Ö–æ–¥–æ–º, —á—Ç–æ–±—ã —Å–æ—Å—Ç–æ—è–Ω–∏–µ —É—Å–ø–µ–ª–æ –æ–±–Ω–æ–≤–∏—Ç—å—Å—è
    setTimeout(() => {
      goToNextStep();
    }, 100);
  };

  // Handle language selection and process video info
  const handleLanguageSelection = async (language: string) => {
    // –ü—ã—Ç–∞–µ–º—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å ID –≤–∏–¥–µ–æ –∏–∑ localStorage, –µ—Å–ª–∏ –æ–Ω–æ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    const effectiveVideoId = videoId || parseInt(localStorage.getItem('uploadedVideoId') || '0');
    const effectiveFileKey = fileKey || localStorage.getItem('uploadedFileKey');
    const effectiveTransactionId = transactionId || localStorage.getItem('transactionId');
    
    if (!effectiveVideoId || !effectiveFileKey) {
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: "–°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –≤–∏–¥–µ–æ",
        variant: "destructive",
      });
      return;
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –µ—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏—è –±—ã–ª–∏ –ø–æ–ª—É—á–µ–Ω—ã –∏–∑ localStorage
    if (!videoId && effectiveVideoId) {
      setVideoId(effectiveVideoId);
    }
    if (!fileKey && effectiveFileKey) {
      setFileKey(effectiveFileKey);
    }

    setIsUploading(true);
    setSelectedLanguage(language);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫ –≤ localStorage
    localStorage.setItem('selectedLanguage', language);

    try {
      // –ü—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–∞—à –Ω–æ–≤—ã–π –º–µ—Ç–æ–¥ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —è–∑—ã–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞
      try {
        // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        const { default: VideoUploadService } = await import('@/components/order/steps/upload-video/services/VideoUploadService');
        
        // –°–æ–∑–¥–∞–µ–º URL –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –≤–∏–¥–µ–æ
        const S3_ENDPOINT = "https://storage.yandexcloud.net";
        const S3_BUCKET = "golosok"; // –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏–º—è –±–∞–∫–µ—Ç–∞
        const originalUrl = `${S3_ENDPOINT}/${S3_BUCKET}/${effectiveFileKey}`;
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –∫–æ–¥ –¥–ª—è –∞–Ω–æ–Ω–∏–º–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const transactionUniqueCode = `temp_${Date.now()}`;
        
        console.log("üìä Updating video with selected language:", {
          transactionUniqueCode,
          originalUrl,
          language
        });
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º —è–∑—ã–∫–æ–º
        const notificationResult = await VideoUploadService.notifyVideoUploaded(
          transactionUniqueCode,
          originalUrl,
          language
        );
        
        console.log("üìä Language update notification result:", notificationResult);
      } catch (error) {
        console.error("üìä Error updating video language:", error);
        // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
      }
      
      // Move to payment step
      goToNextStep();
    } catch (error) {
      console.error("Error processing video info:", error);
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: error instanceof Error ? error.message : "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∏–¥–µ–æ",
        variant: "destructive",
      });
    } finally {
      setIsUploading(false);
    }
  };

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã
   * –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ CloudPayments
   * –∏–ª–∏ –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ API
   * @param uniqueCode - –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
   */
  const handlePayment = (uniqueCode?: string) => {
    console.log("üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã");
    
    // –ü–æ–ª—É—á–∞–µ–º uniqueCode –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –∏–ª–∏ –∏–∑ localStorage
    const paymentUniqueCode = uniqueCode || localStorage.getItem('paymentUniqueCode');
    
    if (!paymentUniqueCode) {
      console.error("–ù–µ –Ω–∞–π–¥–µ–Ω –∫–æ–¥ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–ø–ª–∞—Ç—ã");
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: "–ù–µ —É–¥–∞–ª–æ—Å—å –∏–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –ø–ª–∞—Ç–µ–∂. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.",
        variant: "destructive",
      });
      return;
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π uniquecode
    localStorage.setItem('paymentUniqueCode', paymentUniqueCode);
    localStorage.setItem('orderPaid', 'true');
    
    // –î–æ–±–∞–≤–ª—è–µ–º uniquecode –≤ –Ω–∞–±–æ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π
    // –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–¥—ã –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –Ω–∞–±–æ—Ä
    const existingUniqueCodesStr = localStorage.getItem('completedPaymentCodes') || '[]';
    let completedPaymentCodes = [];
    try {
      completedPaymentCodes = JSON.parse(existingUniqueCodesStr);
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –º–∞—Å—Å–∏–≤
      if (!Array.isArray(completedPaymentCodes)) {
        completedPaymentCodes = [];
      }
    } catch (e) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ —Å—Ç—Ä–æ–∫–∏ completedPaymentCodes:', e);
      completedPaymentCodes = [];
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –∫–æ–¥, –µ—Å–ª–∏ –µ–≥–æ –µ—â–µ –Ω–µ—Ç –≤ –º–∞—Å—Å–∏–≤–µ
    if (!completedPaymentCodes.includes(paymentUniqueCode)) {
      completedPaymentCodes.push(paymentUniqueCode);
      localStorage.setItem('completedPaymentCodes', JSON.stringify(completedPaymentCodes));
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ
    const orderInfo = {
      uniquecode: paymentUniqueCode,
      date: new Date().toISOString(),
      email: localStorage.getItem('userEmail') || '',
      language: localStorage.getItem('selectedLanguage') || '',
      videoDuration: localStorage.getItem('videoDuration') || ''
    };
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ
    localStorage.setItem(`order_${paymentUniqueCode}`, JSON.stringify(orderInfo));
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞
    const randomOrderId = Math.floor(Math.random() * 1000000);
    setOrderNumber(`OR-${randomOrderId}`);
    localStorage.setItem('orderNumber', `OR-${randomOrderId}`);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ –ë–î, –µ—Å–ª–∏ –µ—Å—Ç—å transactionId
    if (transactionId) {
      supabase
        .from('transactions')
        .update({ status: 'paid' })
        .eq('id', transactionId)
        .then(({ error }) => {
          if (error) {
            console.error("Error updating transaction:", error);
          } else {
            console.log("Transaction status updated to 'paid'");
          }
        });
    }
    
    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º uniquecode
    navigate(`/order?step=3&uniquecode=${paymentUniqueCode}`, { replace: true });
    setCurrentStep(3); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π —à–∞–≥ –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç–µ
    toast({
      title: "–û–ø–ª–∞—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞",
      description: "–í–∞—à –≤–∏–¥–µ–æ—Ä–æ–ª–∏–∫ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è. –†–µ–∑—É–ª—å—Ç–∞—Ç –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤ –≤ —Ç–µ—á–µ–Ω–∏–µ 15 –º–∏–Ω—É—Ç.",
      variant: "default",
    });
  };
  
  // –ü–æ–ª—É—á–∞–µ–º uniquecode –∏–∑ URL, –µ—Å–ª–∏ –µ—Å—Ç—å
  useEffect(() => {
    const params = new URLSearchParams(location.search);
    const uniqueCode = params.get("uniquecode");
    const step = parseInt(params.get("step") || "0");
    
    console.log("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º URL –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:", { uniqueCode, step });
    
    // –ï—Å–ª–∏ –µ—Å—Ç—å uniquecode –∏ –º—ã –Ω–∞ —à–∞–≥–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã
    if (uniqueCode && step === 3) {
      console.log("‚úÖ –ù–∞–π–¥–µ–Ω uniquecode –≤ URL:", uniqueCode);
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–æ–∑–∂–µ
      localStorage.setItem('paymentUniqueCode', uniqueCode);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ API
      const checkPaymentStatus = async () => {
        try {
          console.log("üîÑ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã –¥–ª—è:", uniqueCode);
          const response = await fetch(`https://tbgwudnxjwplqtkjihxc.supabase.co/functions/v1/transaction-info?uniquecode=${uniqueCode}`);
          const data = await response.json();
          
          console.log("üìä –°—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã:", data);
          
          if (data.is_paid) {
            // –ï—Å–ª–∏ –æ–ø–ª–∞—á–µ–Ω–æ, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ
            console.log("‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞");
            localStorage.setItem('orderPaid', 'true');
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ, –µ—Å–ª–∏ –æ–Ω–∞ –¥–æ—Å—Ç—É–ø–Ω–∞
            if (data.video) {
              console.log("üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∏–¥–µ–æ –ø–æ–ª—É—á–µ–Ω–∞:", data.video);
              localStorage.setItem(`video_info_${uniqueCode}`, JSON.stringify(data.video));
            }
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ
            const orderInfo = {
              uniquecode: uniqueCode,
              date: new Date().toISOString(),
              email: localStorage.getItem('userEmail') || '',
              language: localStorage.getItem('selectedLanguage') || '',
              videoDuration: localStorage.getItem('videoDuration') || '',
              is_activated: data.is_activated || false,
              status: data.status || 'pending',
              videoInfo: data.video || null
            };
            
            // –î–æ–±–∞–≤–ª—è–µ–º uniquecode –≤ —Å–ø–∏—Å–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π, –µ—Å–ª–∏ –µ–≥–æ —Ç–∞–º –µ—â–µ –Ω–µ—Ç
            try {
              const existingUniqueCodesStr = localStorage.getItem('completedPaymentCodes') || '[]';
              let completedPaymentCodes = [];
              try {
                completedPaymentCodes = JSON.parse(existingUniqueCodesStr);
                if (!Array.isArray(completedPaymentCodes)) {
                  completedPaymentCodes = [];
                }
              } catch (e) {
                completedPaymentCodes = [];
              }
              
              if (!completedPaymentCodes.includes(uniqueCode)) {
                completedPaymentCodes.push(uniqueCode);
                localStorage.setItem('completedPaymentCodes', JSON.stringify(completedPaymentCodes));
              }
              
              localStorage.setItem(`order_${uniqueCode}`, JSON.stringify(orderInfo));
            } catch (e) {
              console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞:", e);
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞
            if (!orderNumber) {
              const randomOrderId = Math.floor(Math.random() * 1000000);
              const newOrderNumber = `OR-${randomOrderId}`;
              setOrderNumber(newOrderNumber);
              localStorage.setItem('orderNumber', newOrderNumber);
            }
          } else {
            // –ï—Å–ª–∏ –Ω–µ –æ–ø–ª–∞—á–µ–Ω–æ, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —à–∞–≥ –æ–ø–ª–∞—Ç—ã
            console.log("‚ö†Ô∏è –û–ø–ª–∞—Ç–∞ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —à–∞–≥ –æ–ø–ª–∞—Ç—ã");
            navigate(`/order?step=2`, { replace: true });
            setCurrentStep(2);
            toast({
              title: "–ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω",
              description: "–°—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≤–µ—Ä—à–∏—Ç–µ –æ–ø–ª–∞—Ç—É.",
              variant: "destructive",
            });
          }
        } catch (error) {
          console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –æ–ø–ª–∞—Ç—ã:", error);
          toast({
            title: "–û—à–∏–±–∫–∞",
            description: "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            variant: "destructive",
          });
        }
      };
      
      checkPaymentStatus();
    } else if (step === 3 && !uniqueCode) {
      // –ï—Å–ª–∏ –º—ã –Ω–∞ —à–∞–≥–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞, –Ω–æ –Ω–µ—Ç uniquecode, –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤ localStorage
      console.log("‚ö†Ô∏è –®–∞–≥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –±–µ–∑ uniquecode –≤ URL");
      const savedUniqueCode = localStorage.getItem('paymentUniqueCode');
      
      if (savedUniqueCode) {
        // –ï—Å–ª–∏ –µ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π uniquecode, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ URL
        console.log("‚úÖ –ù–∞–π–¥–µ–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π uniquecode:", savedUniqueCode);
        navigate(`/order?step=3&uniquecode=${savedUniqueCode}`, { replace: true });
      } else {
        // –ï—Å–ª–∏ –Ω–µ—Ç uniquecode, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —à–∞–≥ –æ–ø–ª–∞—Ç—ã
        console.log("‚ö†Ô∏è –ù–µ—Ç uniquecode, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —à–∞–≥ –æ–ø–ª–∞—Ç—ã");
        navigate(`/order?step=2`, { replace: true });
        setCurrentStep(2);
        toast({
          title: "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–ª–∞—Ç–µ–∂–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞",
          description: "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≤–µ—Ä—à–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –æ–ø–ª–∞—Ç—ã.",
          variant: "destructive",
        });
      }
    }
  }, [location.search, navigate, orderNumber]);

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –∑–∞–∫–∞–∑–æ–≤ –∏–∑ localStorage
   * @returns –ú–∞—Å—Å–∏–≤ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–∫–∞–∑–∞—Ö
   */
  const getOrderHistory = () => {
    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–¥–æ–≤ –∑–∞–∫–∞–∑–æ–≤
    const uniqueCodesStr = localStorage.getItem('completedPaymentCodes') || '[]';
    let uniqueCodes = [];
    
    try {
      uniqueCodes = JSON.parse(uniqueCodesStr);
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –º–∞—Å—Å–∏–≤
      if (!Array.isArray(uniqueCodes)) {
        console.error('completedPaymentCodes –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –º–∞—Å—Å–∏–≤–æ–º');
        return [];
      }
    } catch (e) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ completedPaymentCodes:', e);
      return [];
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –∫–∞–∂–¥–æ–º—É –∑–∞–∫–∞–∑—É
    const orderHistory = uniqueCodes.map(code => {
      const orderInfoStr = localStorage.getItem(`order_${code}`);
      if (!orderInfoStr) return null;
      
      try {
        const orderInfo = JSON.parse(orderInfoStr);
        return {
          ...orderInfo,
          // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –¥–∞—Ç—ã –≤ –æ–±—ä–µ–∫—Ç Date
          date: new Date(orderInfo.date),
        };
      } catch (e) {
        console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–∫–∞–∑–µ ${code}:`, e);
        return null;
      }
    }).filter(Boolean); // –§–∏–ª—å—Ç—Ä—É–µ–º null –∑–Ω–∞—á–µ–Ω–∏—è
    
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ (–æ—Ç –Ω–æ–≤—ã—Ö –∫ —Å—Ç–∞—Ä—ã–º)
    return orderHistory.sort((a, b) => b.date.getTime() - a.date.getTime());
  };

  return {
    currentStep,
    steps,
    videoFile,
    setVideoFile,
    selectedLanguage,
    setSelectedLanguage,
    handleLanguageSelection,
    orderNumber,
    goToNextStep,
    goToPreviousStep,
    handlePayment,
    transactionId,
    handleUploadSuccess,
    isUploading,
    videoDuration,
    getOrderHistory // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é
  };
};