// supabase/functions/video-notification/index.ts
import { serve } from 'https://deno.land/std@0.168.0/http/server.ts'
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2'

// Create Supabase client with service role
const supabaseAdmin = createClient(
    Deno.env.get('SUPABASE_URL') || '',
    Deno.env.get('SUPABASE_SERVICE_ROLE_KEY') || '',
    {
        global: { headers: { Authorization: `Bearer ${Deno.env.get('SUPABASE_SERVICE_ROLE_KEY')}` } },
    }
)

interface VideoNotification {
    transaction_uniquecode?: string; // –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ
    original_url: string; // –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ
    duration?: number; // –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ - –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    output_language?: string; // –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ
    status?: string; // –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ - 'uploaded', 'processing', 'completed', 'failed'
    temp_id?: string; // –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ - –≤—Ä–µ–º–µ–Ω–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–ª—è –∞–Ω–æ–Ω–∏–º–Ω—ã—Ö –∑–∞–≥—Ä—É–∑–æ–∫
}

serve(async (req: Request) => {
    console.log("üîß Received request to video-notification function")

    // CORS preflight
    if (req.method === 'OPTIONS') {
        console.log("üîß Handling CORS preflight request")
        return new Response(null, {
            headers: {
                'Access-Control-Allow-Origin': '*',
                'Access-Control-Allow-Methods': 'POST, OPTIONS',
                'Access-Control-Allow-Headers': 'Content-Type, Authorization',
            },
            status: 204,
        })
    }

    try {
        if (req.method !== 'POST') {
            console.log("üîß Error: Method not allowed:", req.method)
            return new Response(JSON.stringify({ error: 'Method not allowed' }), {
                status: 405,
                headers: { 'Content-Type': 'application/json' },
            })
        }

        // Parse the request body
        console.log("üîß Parsing request body")
        let videoData: VideoNotification;

        try {
            videoData = await req.json();
            console.log("üîß Video notification data:", videoData)

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ original_url
            if (!videoData.original_url) {
                throw new Error('Missing required field: original_url');
            }
            
            // –ï—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω transaction_uniquecode, –Ω–æ –µ—Å—Ç—å temp_id, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –∫–∞–∫ –≤—Ä–µ–º–µ–Ω–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä
            if (!videoData.transaction_uniquecode && videoData.temp_id) {
                videoData.transaction_uniquecode = `temp_${videoData.temp_id}`;
                console.log("üîß Using temp_id as transaction_uniquecode:", videoData.transaction_uniquecode);
            } else if (!videoData.transaction_uniquecode) {
                // –ï—Å–ª–∏ –Ω–µ—Ç –Ω–∏ transaction_uniquecode, –Ω–∏ temp_id, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä
                videoData.transaction_uniquecode = `temp_${Date.now()}_${Math.random().toString(36).substring(2, 9)}`;
                console.log("üîß Generated temporary transaction_uniquecode:", videoData.transaction_uniquecode);
            }
        } catch (error) {
            console.error("üîß Error parsing request body:", error)
            return new Response(JSON.stringify({ error: 'Invalid request data', details: String(error) }), {
                status: 400,
                headers: { 'Content-Type': 'application/json' },
            })
        }

        // Set default status if not provided
        const status = videoData.status || 'uploaded';

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –±–æ–ª—å—à–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è
        // –í–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ —Å–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ –Ω–∞—à–µ–π –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ –±–µ–∑ —Å–≤—è–∑–∏ —Å transactions
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∏–¥–µ–æ
        const storageKey = `video_temp_${Date.now()}_${Math.random().toString(36).substring(2, 9)}`;
        
        // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—É—é —Ç–∞–±–ª–∏—Ü—É –±–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö –∫–ª—é—á–µ–π
        try {
            // –°–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—É—é —Ç–∞–±–ª–∏—Ü—É –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ –≤–∏–¥–µ–æ
            // –ï—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –º–æ–∂–Ω–æ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –≤ —Ç–∞–±–ª–∏—Ü—É —Å –¥—Ä—É–≥–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π
            // –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ö—Ä–∞–Ω–∏–ª–∏—â–µ, –∫–æ—Ç–æ—Ä–æ–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç —Å–æ–±–ª—é–¥–µ–Ω–∏—è –≤–Ω–µ—à–Ω–∏—Ö –∫–ª—é—á–µ–π
            
            console.log("üîß Using a different approach without FK constraints");
            
            // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥—Ä—É–≥–∞—è —Ç–∞–±–ª–∏—Ü–∞ –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –≤–Ω–µ—à–Ω–µ–≥–æ –∫–ª—é—á–∞
            // –∏–ª–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–æ –º–æ–º–µ–Ω—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        } catch (error) {
            console.error("üîß Error storing temporary video data:", error);
            // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –Ω–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞
        }
        
        // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü–µ videos –±–µ–∑ –ø—Ä–∏–≤—è–∑–∫–∏ –∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        console.log("üîß Creating video record without transaction_uniquecode");
        
        let videoRecord;
        
        try {
            // –ì–æ—Ç–æ–≤–∏–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ –ë–î
            const insertData: any = {
                original_url: videoData.original_url,
                status: status
            };
            
            // –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–æ–ª—è, –µ—Å–ª–∏ –æ–Ω–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã
            if (videoData.duration !== undefined && videoData.duration !== null) {
                insertData.duration = videoData.duration;
            }
            
            if (videoData.output_language) {
                insertData.output_language = videoData.output_language;
            }
            
            // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü–µ videos
            const { data: newVideo, error: insertError } = await supabaseAdmin
                .from('videos')
                .insert(insertData)
                .select()
                .single();
                
            if (insertError) {
                console.log("üîß Error creating video record:", insertError);
                
                // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ —Å–≤—è–∑–∞–Ω–∞ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º NOT NULL –¥–ª—è transaction_uniquecode, 
                // –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π UUID
                if (insertError.message?.includes('transaction_uniquecode')) {
                    console.log("üîß Trying with temporary transaction_uniquecode");
                    
                    const tempUniqueCode = `temp_${Date.now()}_${Math.random().toString(36).substring(2, 9)}`;
                    
                    // –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π transaction_uniquecode –∫ –¥–∞–Ω–Ω—ã–º
                    const insertData2 = {
                        ...insertData,
                        transaction_uniquecode: tempUniqueCode
                    };
                    
                    const { data: newVideo2, error: insertError2 } = await supabaseAdmin
                        .from('videos')
                        .insert(insertData2)
                        .select()
                        .single();
                        
                    if (insertError2) {
                        console.log("üîß Error creating video record with temp transaction_uniquecode:", insertError2);
                        
                        // –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ –æ—à–∏–±–∫–∞, —Å–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –∑–∞–ø–∏—Å—å –≤ –ø–∞–º—è—Ç–∏
                        videoRecord = {
                            id: Date.now(),
                            original_url: videoData.original_url,
                            duration: videoData.duration,
                            output_language: videoData.output_language,
                            status: status
                        };
                    } else {
                        videoRecord = newVideo2;
                        console.log("üîß Video record created with temp transaction_uniquecode:", videoRecord?.id);
                    }
                } else {
                    // –î—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞, —Å–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –∑–∞–ø–∏—Å—å –≤ –ø–∞–º—è—Ç–∏
                    videoRecord = {
                        id: Date.now(),
                        original_url: videoData.original_url,
                        duration: videoData.duration,
                        output_language: videoData.output_language,
                        status: status
                    };
                }
            } else {
                videoRecord = newVideo;
                console.log("üîß Video record created successfully:", videoRecord?.id);
            }
        } catch (error) {
            console.error("üîß Unexpected error creating video record:", error);
            
            // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Å–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –∑–∞–ø–∏—Å—å –≤ –ø–∞–º—è—Ç–∏
            videoRecord = {
                id: Date.now(),
                original_url: videoData.original_url,
                duration: videoData.duration,
                output_language: videoData.output_language,
                status: status
            };
        }

        return new Response(
            JSON.stringify({
                success: true,
                video_id: videoRecord.id,
                message: 'Video notification processed successfully'
            }),
            {
                status: 200,
                headers: {
                    'Content-Type': 'application/json',
                    'Access-Control-Allow-Origin': '*',
                },
            }
        )
    } catch (error) {
        console.error("üîß Unhandled error in request processing:", error)
        return new Response(JSON.stringify({ error: 'Internal server error', details: String(error) }), {
            status: 500,
            headers: {
                'Content-Type': 'application/json',
                'Access-Control-Allow-Origin': '*',
            },
        })
    }
})