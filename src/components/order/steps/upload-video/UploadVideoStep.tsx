import React, { useState, useRef, useEffect } from "react";
import { toast } from "@/components/ui/use-toast";
import Icon from "@/components/ui/icon";
import { UploadVideoStepProps } from "./types";
import { VideoStorageUtils, uploadFileWithProgress } from "./utils";
import { VideoUploadService } from "./services";
import { 
  DropZone, 
  UploadProgress, 
  VideoInfo, 
  VideoActionButtons, 
  VideoRecommendations 
} from "./components";

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è URL –≤–∏–¥–µ–æ
const S3_ENDPOINT = "https://storage.yandexcloud.net"; // URL —Ö—Ä–∞–Ω–∏–ª–∏—â–∞, –≥–¥–µ —Ä–∞–∑–º–µ—â–∞—é—Ç—Å—è —Ñ–∞–π–ª—ã
const S3_BUCKET = "golosok"; // –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏–º—è –±–∞–∫–µ—Ç–∞

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∞ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
const MAX_FILE_SIZE = 5 * 1024 * 1024 * 1024; // 5GB –≤ –±–∞–π—Ç–∞—Ö

/**
 * –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ
 */
const UploadVideoStep: React.FC<UploadVideoStepProps> = ({
  videoFile,
  setVideoFile,
  transactionId,
  onUploadSuccess
}) => {
  const [isDragging, setIsDragging] = useState(false);
  const fileInputRef = useRef<HTMLInputElement>(null);
  const [videoSrc, setVideoSrc] = useState<string | null>(null);
  const [isLoading, setIsLoading] = useState(false);
  const [isPreparingUpload, setIsPreparingUpload] = useState(false);
  const [uploadProgress, setUploadProgress] = useState(0);
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–ª–∞–≥ –∑–∞–≥—Ä—É–∑–∫–∏, –ø—Ä–æ–≤–µ—Ä—è—è localStorage –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  const [isVideoUploaded, setIsVideoUploaded] = useState(VideoStorageUtils.getUploadStatus);

  //////////////////////////////////
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è —Ñ–∞–π–ª–æ–≤
  //////////////////////////////////
  
  // –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è MAX_FILE_SIZE, –æ–±—ä—è–≤–ª–µ–Ω–Ω–∞—è –≤—ã—à–µ
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞ –∏–∑ –¥–∏–∞–ª–æ–≥–∞
  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const files = e.target.files;
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ –≤–∏–¥–µ–æ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –Ω–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞
    if (isVideoUploaded) {
      setIsVideoUploaded(false);
      VideoStorageUtils.setUploadStatus(false);
    }
    
    if (files && files[0]) {
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
      if (files[0].size > MAX_FILE_SIZE) {
        console.error("üìä File too large:", files[0].size, "bytes");
        toast({
          title: "–û—à–∏–±–∫–∞",
          description: "–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç –≤ 5GB",
          variant: "destructive",
        });
        return;
      }
      
      // Create URL for video preview
      const fileUrl = URL.createObjectURL(files[0]);
      setVideoSrc(fileUrl);
      setVideoFile(files[0]);
      
      // Start upload automatically
      setTimeout(() => {
        uploadVideo();
      }, 100);
    }
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ Drag & Drop
  const handleDragOver = (e: React.DragEvent<HTMLDivElement>) => {
    e.preventDefault();
    setIsDragging(true);
  };

  const handleDragLeave = () => {
    setIsDragging(false);
  };

  const handleDrop = (e: React.DragEvent<HTMLDivElement>) => {
    e.preventDefault();
    setIsDragging(false);

    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ –≤–∏–¥–µ–æ –ø—Ä–∏ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞
    if (isVideoUploaded) {
      setIsVideoUploaded(false);
      VideoStorageUtils.setUploadStatus(false);
    }

    const files = e.dataTransfer.files;
    if (files && files[0]) {
      // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
      if (!files[0].type.startsWith("video/")) {
        toast({
          title: "–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ñ–æ—Ä–º–∞—Ç",
          description: "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥–µ–æ—Ñ–∞–π–ª",
          variant: "destructive",
        });
        return;
      }
      
      // –ó–∞—Ç–µ–º –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
      if (files[0].size > MAX_FILE_SIZE) {
        toast({
          title: "–û—à–∏–±–∫–∞",
          description: "–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç –≤ 5GB",
          variant: "destructive",
        });
        return;
      }
      
      // –ï—Å–ª–∏ –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –∑–∞–≥—Ä—É–∑–∫–æ–π
      const fileUrl = URL.createObjectURL(files[0]);
      setVideoSrc(fileUrl);
      setVideoFile(files[0]);
      
      // Start upload automatically
      setTimeout(() => {
        uploadVideo();
      }, 100);
    }
  };

  // –û—á–∏—Å—Ç–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
  const clearSelection = () => {
    if (videoSrc) {
      URL.revokeObjectURL(videoSrc);
    }
    setVideoSrc(null);
    setVideoFile(null);
    if (fileInputRef.current) {
      fileInputRef.current.value = "";
    }
    setUploadProgress(0);
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ –∏ —É–¥–∞–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ localStorage
    setIsVideoUploaded(false);
    VideoStorageUtils.clearVideoInfo();
  };

  // –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ
  const uploadVideo = async () => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–ª–∞–≥ –≤ localStorage
    const isUploadedInStorage = VideoStorageUtils.getUploadStatus();
    
    // –ï—Å–ª–∏ –≤–∏–¥–µ–æ —É–∂–µ –æ—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ - –Ω–µ –∑–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω–æ
    if (isVideoUploaded || isUploadedInStorage) {
      // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å localStorage
      if (!isVideoUploaded && isUploadedInStorage) {
        setIsVideoUploaded(true);
      }
      toast({
        title: "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è",
        description: "–í–∏–¥–µ–æ —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –∏ –≥–æ—Ç–æ–≤–æ –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ",
      });
      return;
    }
    
    // –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    const videoInfo = VideoStorageUtils.getVideoInfo();
    
    // –ï—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –≤–∏–¥–µ–æ, –Ω–æ –Ω–µ—Ç —Ñ–∞–π–ª–∞ - –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    if (videoInfo.videoId && videoInfo.fileKey && !videoFile) {
      console.log("üìä Found saved video info in localStorage, marking as uploaded");
      setIsVideoUploaded(true);
      VideoStorageUtils.setUploadStatus(true);
      return;
    }
    
    if (!videoFile) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞ –≤ input –∫–∞–∫ —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç
      const fileInput = fileInputRef.current;
      if (fileInput && fileInput.files && fileInput.files[0]) {
        console.log("üìä Found file in file input, using it as fallback");
        const file = fileInput.files[0];
        setVideoFile(file);
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –¥–ª—è –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–æ–π –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏
        const retryAttempted = sessionStorage.getItem('upload_retry_attempted');
        if (!retryAttempted) {
          sessionStorage.setItem('upload_retry_attempted', 'true');
          // –ü–æ–≤—Ç–æ—Ä—è–µ–º –ø–æ–ø—ã—Ç–∫—É –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑
          setTimeout(() => {
            console.log("üìä Retrying upload with file from input:", file.name);
            uploadVideo();
          }, 100);
          return;
        } else {
          console.log("üìä Already attempted retry, not trying again");
          sessionStorage.removeItem('upload_retry_attempted');
        }
      } else {
        console.error("üìä No video file selected when uploadVideo was called!");
      }
      
      // –ï—Å–ª–∏ –µ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ, –Ω–æ –Ω–µ—Ç —Ñ–∞–π–ª–∞ - –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
      if (isUploadedInStorage || (videoInfo.videoId && videoInfo.fileKey)) {
        console.log("üìä No file, but upload data exists, skipping error");
        setIsVideoUploaded(true);
        return;
      }
      
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: "–ù–µ –≤—ã–±—Ä–∞–Ω —Ñ–∞–π–ª",
        variant: "destructive",
      });
      return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞ –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π
    if (videoFile.size > MAX_FILE_SIZE) {
      console.error("üìä File too large:", videoFile.size, "bytes");
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: "–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç –≤ 5GB",
        variant: "destructive",
      });
      return;
    }

    console.log("üìä Starting upload for:", videoFile.name, "Size:", videoFile.size, "Type:", videoFile.type);
    setIsLoading(true);
    setIsPreparingUpload(true);
    setUploadProgress(0);

    try {
      let videoId: number, fileKey: string;
      
      // –î–µ–º–æ-—Ä–µ–∂–∏–º (–æ—Ç–∫–ª—é—á—ë–Ω)
      const FORCE_DEMO_MODE = false;

      // –ó–∞–≥—Ä—É–∑–∫–∞ –≤ –¥–µ–º–æ-—Ä–µ–∂–∏–º–µ –∏–ª–∏ –¥–ª—è –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      if (FORCE_DEMO_MODE) {
        console.log("üìä Running in demo mode");
        const result = await VideoUploadService.uploadDemoVideo(videoFile);
        videoId = result.videoId;
        fileKey = result.fileKey;
      } else {
        console.log("üìä Running real upload with presigned URL");
        
        // –®–∞–≥ 1: –ü–æ–ª—É—á–∞–µ–º presigned URL
        const { presignedUrl, fileKey: key, videoId: id } = await VideoUploadService.getPresignedUrl(
          videoFile, 
          transactionId
        );
        
        fileKey = key;
        videoId = id;
        
        // –®–∞–≥ 2: –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –Ω–∞–ø—Ä—è–º—É—é –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
        console.log("üìä Starting direct upload to storage with presigned URL");
        setIsPreparingUpload(false);
        
        await uploadFileWithProgress(
          videoFile, 
          presignedUrl, 
          (progress) => setUploadProgress(progress)
        );
        
        console.log("üìä Direct upload successful");
      }
      
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å 100%
      setUploadProgress(100);
      setIsPreparingUpload(false);
      
      // –û—Ç–º–µ—á–∞–µ–º —É—Å–ø–µ—à–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
      setIsVideoUploaded(true);
      VideoStorageUtils.saveVideoInfo(videoId, fileKey, transactionId, videoFile.name);
      
      toast({
        title: "–£—Å–ø–µ—Ö",
        description: "–í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ",
      });

      // –°–æ–∑–¥–∞–µ–º URL –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –≤–∏–¥–µ–æ
      const originalUrl = `${S3_ENDPOINT}/${S3_BUCKET}/${fileKey}`;
      console.log("üìä Original video URL:", originalUrl);

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–º –≤–∏–¥–µ–æ –∏ —Å–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ –ë–î
      try {
        // –ü–æ–ª—É—á–∞–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–∏–¥–µ–æ —á–µ—Ä–µ–∑ HTML5 Video API
        console.log("üìä Getting video duration from file");
        let videoDuration = 0;
        
        // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –≤–∏–¥–µ–æ-—ç–ª–µ–º–µ–Ω—Ç –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        if (videoFile) {
          const videoElement = document.createElement('video');
          const objectUrl = URL.createObjectURL(videoFile);
          
          // –ü–æ–ª—É—á–∞–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
          videoDuration = await new Promise<number>((resolve) => {
            videoElement.addEventListener('loadedmetadata', () => {
              // –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ —Å–µ–∫—É–Ω–¥–∞—Ö, –æ–∫—Ä—É–≥–ª–µ–Ω–Ω–∞—è –¥–æ —Ü–µ–ª–æ–≥–æ —á–∏—Å–ª–∞
              const duration = Math.round(videoElement.duration);
              URL.revokeObjectURL(objectUrl);
              resolve(duration);
            });
            
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
            videoElement.addEventListener('error', () => {
              console.error("üìä Error loading video metadata");
              URL.revokeObjectURL(objectUrl);
              resolve(0); // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 0
            });
            
            videoElement.src = objectUrl;
            videoElement.load();
          });
          
          console.log("üìä Video duration:", videoDuration, "seconds");
        }
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ –≤–∏–¥–µ–æ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏ –≤ –ë–î
        console.log("üìä Sending video notification to create record in database");
        
        const notificationResult = await VideoUploadService.notifyVideoUploaded(
          null, // –ù–µ –ø–µ—Ä–µ–¥–∞–µ–º transaction_uniquecode
          originalUrl,
          null, // –ù–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —è–∑—ã–∫ –Ω–∞ —ç—Ç–æ–º —ç—Ç–∞–ø–µ
          videoDuration || null // –ü–µ—Ä–µ–¥–∞–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å, –µ—Å–ª–∏ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å
        );
        
        console.log("üìä Notification result:", notificationResult);
        
        // –ï—Å–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∏ —Å–æ–∑–¥–∞–Ω–∞ –∑–∞–ø–∏—Å—å –≤ –ë–î
        if (notificationResult.success && notificationResult.video_id) {
          console.log("üìä Video record created with ID:", notificationResult.video_id);
          
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω–æ–π –∑–∞–ø–∏—Å–∏ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ
          localStorage.setItem('videoDbId', notificationResult.video_id.toString());
          localStorage.setItem('videoDuration', videoDuration.toString());
        }
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ –ª–æ–∫–∞–ª—å–Ω–æ –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ
        localStorage.setItem('videoOriginalUrl', originalUrl);
        
        console.log("üìä Video uploaded successfully, saved details:", { 
          videoId, 
          fileKey, 
          originalUrl,
          videoDuration,
          dbId: notificationResult.video_id
        });
        
        // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
        if (onUploadSuccess) {
          console.log("üìä Calling onUploadSuccess with:", { videoId, fileKey });
          onUploadSuccess(videoId, fileKey);
        }
      } catch (error) {
        console.error("üìä Error creating video record:", error);
        
        // –í—ã–∑—ã–≤–∞–µ–º callback –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É –¥–∞–∂–µ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        if (onUploadSuccess) {
          console.log("üìä Calling onUploadSuccess after error:", { videoId, fileKey });
          onUploadSuccess(videoId, fileKey);
        }
      }
    } catch (error) {
      console.error("üìä Upload error:", error);
      setIsVideoUploaded(false);
      VideoStorageUtils.setUploadStatus(false);
      
      toast({
        title: "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏",
        description: error instanceof Error ? error.message : "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–∏–¥–µ–æ",
        variant: "destructive",
      });
    } finally {
      setIsLoading(false);
      setIsPreparingUpload(false);
    }
  };

  ////////////////////
  // –≠—Ñ—Ñ–µ–∫—Ç—ã
  ////////////////////
  
  // –≠—Ñ—Ñ–µ–∫—Ç –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ñ–∞–π–ª–∞ –∏ —Ñ–ª–∞–≥–∞ –∑–∞–≥—Ä—É–∑–∫–∏
  useEffect(() => {    
    // –ü—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ —Å–≤–µ—Ä—è–µ–º —Å —Ñ–ª–∞–≥–æ–º –∑–∞–≥—Ä—É–∑–∫–∏
    if (videoFile && !isVideoUploaded) {
      const videoInfo = VideoStorageUtils.getVideoInfo();
      
      if (videoInfo.fileName === videoFile.name) {
        setIsVideoUploaded(true);
        VideoStorageUtils.setUploadStatus(true);
      } else {
        setIsVideoUploaded(false);
        VideoStorageUtils.setUploadStatus(false);
      }
    } 
    
    // –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–∞–π–ª –∏ —Ñ–ª–∞–≥ –∑–∞–≥—Ä—É–∑–∫–∏ - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è —Ñ–∞–π–ª–∞
    if (videoFile && isVideoUploaded) {
      localStorage.setItem('uploadedFileName', videoFile.name);
    }
  }, [videoFile, isVideoUploaded]);
  
  // –≠—Ñ—Ñ–µ–∫—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–ª–∞–≥–∞ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  useEffect(() => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ —Ñ–ª–∞–≥ –∑–∞–≥—Ä—É–∑–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ localStorage
    if (!videoFile && VideoStorageUtils.getUploadStatus()) {
      setIsVideoUploaded(true);
    }
  }, [videoFile]);

  // –≠—Ñ—Ñ–µ–∫—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ñ–∞–π–ª–∞
  useEffect(() => {
    // –ï—Å–ª–∏ —Ñ–ª–∞–≥ –∑–∞–≥—Ä—É–∑–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ localStorage, –Ω–æ –Ω–µ—Ç —Ñ–∞–π–ª–∞
    if (!videoFile && VideoStorageUtils.getUploadStatus()) {
      setIsVideoUploaded(true);
      return;
    }
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏:
    // 1. –ï—Å—Ç—å —Ñ–∞–π–ª
    // 2. –ù–µ –∏–¥–µ—Ç –∑–∞–≥—Ä—É–∑–∫–∞
    // 3. –ü—Ä–æ–≥—Ä–µ—Å—Å = 0
    // 4. –í–∏–¥–µ–æ –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ
    if (videoFile && !isLoading && uploadProgress === 0 && !isVideoUploaded) {
      const videoInfo = VideoStorageUtils.getVideoInfo();
      
      if (videoInfo.fileName === videoFile.name) {
        setIsVideoUploaded(true);
      } else {
        // –î–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∑–∞–≥—Ä—É–∑–æ–∫
        sessionStorage.removeItem('upload_retry_attempted');
        setTimeout(() => {
          uploadVideo();
        }, 300);
      }
    }
  }, [videoFile, transactionId, isLoading, uploadProgress, isVideoUploaded]);

  // –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∞
  const hasVideoFile = !!videoFile;
  const isVideoReady = hasVideoFile || isVideoUploaded;

  return (
    <div className="fade-slide-in">
      <h2 className="text-xl font-semibold mb-6">–ó–∞–≥—Ä—É–∑–∏—Ç–µ –≤–∞—à–µ –≤–∏–¥–µ–æ</h2>

      {/* –°–∫—Ä—ã—Ç—ã–π –∏–Ω–ø—É—Ç –¥–ª—è —Ñ–∞–π–ª–∞ */}
      <input
        type="file"
        ref={fileInputRef}
        onChange={handleFileChange}
        accept="video/*"
        className="hidden"
      />

      {/* –û—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ */}
      {!isVideoReady ? (
        // –î—Ä–æ–ø–∑–æ–Ω–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ
        <DropZone 
          isDragging={isDragging}
          handleDragOver={handleDragOver}
          handleDragLeave={handleDragLeave}
          handleDrop={handleDrop}
          onClick={() => fileInputRef.current?.click()}
        />
      ) : (
        // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∏–¥–µ–æ –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å –∑–∞–≥—Ä—É–∑–∫–∏
        <div className="border rounded-lg p-6 bg-gray-50 fade-slide-in">
          {isLoading ? (
            // –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∑–∞–≥—Ä—É–∑–∫–∏
            <UploadProgress 
              isPreparingUpload={isPreparingUpload}
              uploadProgress={uploadProgress}
            />
          ) : (
            <>
              {/* –®–∞–ø–∫–∞ —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º –∏ –∫–Ω–æ–ø–∫–æ–π —É–¥–∞–ª–µ–Ω–∏—è */}
              <div className="flex justify-between items-center mb-4">
                <h3 className="font-medium text-lg">–í—ã–±—Ä–∞–Ω–Ω–æ–µ –≤–∏–¥–µ–æ</h3>
                <button
                  onClick={clearSelection}
                  className="text-gray-500 hover:text-red-500 transition-colors"
                >
                  <Icon name="X" size={20} />
                </button>
              </div>

              {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∏–¥–µ–æ */}
              <VideoInfo 
                videoFile={videoFile} 
                isVideoUploaded={isVideoUploaded}
                uploadVideo={uploadVideo}
              />

              {/* –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π */}
              <VideoActionButtons 
                isLoading={isLoading}
                isVideoUploaded={isVideoUploaded}
                uploadProgress={uploadProgress}
                videoFile={videoFile}
                uploadVideo={uploadVideo}
                clearSelection={clearSelection}
                fileInputRef={fileInputRef}
              />
            </>
          )}
        </div>
      )}

      {/* –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ */}
      <VideoRecommendations />
    </div>
  );
};

export default UploadVideoStep;