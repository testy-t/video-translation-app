import React, { createContext, useState, useContext, useEffect, ReactNode } from 'react';

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —è–∑—ã–∫–∞ –∏–∑ API
interface LanguageFromAPI {
  id: number;
  original_name: string;
  ru_name: string;
  iso_code: string;
  flag_emoji: string;
  is_active: boolean;
}

// –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö
export interface Language {
  code: string;      // iso_code –∏–∑ API
  name: string;      // ru_name –∏–∑ API
  flag?: string;     // flag_emoji –∏–∑ API
}

interface LanguageContextType {
  languages: Language[];
  isLoading: boolean;
  error: string | null;
  getLanguageName: (code: string) => string;
}

// –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
const LanguageContext = createContext<LanguageContextType | undefined>(undefined);

// API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —è–∑—ã–∫–æ–≤ –∏–∑ Supabase REST API
const fetchLanguages = async (): Promise<Language[]> => {
  try {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º REST API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —è–∑—ã–∫–æ–≤
    const response = await fetch('https://tbgwudnxjwplqtkjihxc.supabase.co/rest/v1/languages', {
      headers: {
        'Content-Type': 'application/json'
      }
    });
    
    if (!response.ok) {
      console.error(`–û—à–∏–±–∫–∞ API languages: ${response.status} ${response.statusText}`);
      throw new Error(`–û—à–∏–±–∫–∞ API: ${response.status}`);
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ LanguageFromAPI[]
    const apiLanguages: LanguageFromAPI[] = await response.json();
    console.log('üåç –ü–æ–ª—É—á–µ–Ω–æ —è–∑—ã–∫–æ–≤ –∏–∑ API:', apiLanguages.length);
    
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –Ω–∞—à —Ñ–æ—Ä–º–∞—Ç
    return apiLanguages
      .filter(lang => lang.is_active) // –¢–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ —è–∑—ã–∫–∏
      .map(lang => ({
        code: lang.iso_code,
        name: lang.ru_name,
        flag: lang.flag_emoji
      }));
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —è–∑—ã–∫–æ–≤:', error);
    return [];
  }
};

export const LanguageProvider: React.FC<{ children: ReactNode }> = ({ children }) => {
  const [languages, setLanguages] = useState<Language[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    const loadLanguages = async () => {
      try {
        setIsLoading(true);
        console.log('üåç –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —è–∑—ã–∫–∞—Ö –∏–∑ API...');
        const data = await fetchLanguages();
        console.log(`üåç –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${data.length} —è–∑—ã–∫–æ–≤`);
        setLanguages(data);
      } catch (err) {
        console.error('üö® –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —è–∑—ã–∫–æ–≤:', err);
        setError(err instanceof Error ? err.message : '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —è–∑—ã–∫–æ–≤');
      } finally {
        setIsLoading(false);
      }
    };

    // –ó–∞–≥—Ä—É–∂–∞–µ–º —è–∑—ã–∫–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∏ –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã
    if (languages.length === 0) {
      loadLanguages();
    }
  }, [languages.length]);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–º–µ–Ω–∏ —è–∑—ã–∫–∞ –ø–æ –∫–æ–¥—É
  const getLanguageName = (code: string): string => {
    if (!code) return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —è–∑—ã–∫';
    
    // –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
    const exactMatch = languages.find(lang => lang.code === code);
    if (exactMatch) return exactMatch.name;
    
    // –ï—Å–ª–∏ –∫–æ–¥ –∏–º–µ–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, en-US, en-AA), 
    // –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –æ—Å–Ω–æ–≤–Ω—É—é —á–∞—Å—Ç—å –∫–æ–¥–∞ –¥–æ –¥–µ—Ñ–∏—Å–∞
    const baseLangCode = code.split('-')[0];
    const baseMatch = languages.find(lang => lang.code === baseLangCode);
    
    return baseMatch ? baseMatch.name : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —è–∑—ã–∫';
  };

  const value = {
    languages,
    isLoading,
    error,
    getLanguageName
  };

  return (
    <LanguageContext.Provider value={value}>
      {children}
    </LanguageContext.Provider>
  );
};

// –•—É–∫ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —è–∑—ã–∫–æ–≤
export const useLanguageContext = (): LanguageContextType => {
  const context = useContext(LanguageContext);
  if (context === undefined) {
    throw new Error('useLanguageContext must be used within a LanguageProvider');
  }
  return context;
};