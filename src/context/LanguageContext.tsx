import React, { createContext, useState, useContext, useEffect, ReactNode } from 'react';
import { LanguagesService, Language as DbLanguage } from '@/integrations/supabase';

// –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö
export interface Language {
  code: string;      // iso_code –∏–∑ API
  name: string;      // ru_name –∏–∑ API
  flag?: string;     // flag_emoji –∏–∑ API
}

interface LanguageContextType {
  languages: Language[];
  isLoading: boolean;
  error: string | null;
  getLanguageName: (code: string) => string;
}

// –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
const LanguageContext = createContext<LanguageContextType | undefined>(undefined);

/**
 * –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –æ–±—ä–µ–∫—Ç —è–∑—ã–∫–∞ –∏–∑ –ë–î –≤ —Ñ–æ—Ä–º–∞—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–π –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
 */
const mapDbLanguageToAppLanguage = (dbLang: DbLanguage): Language => ({
  code: dbLang.iso_code,
  name: dbLang.ru_name,
  flag: dbLang.flag_emoji || 'üåê'
});

export const LanguageProvider: React.FC<{ children: ReactNode }> = ({ children }) => {
  const [languages, setLanguages] = useState<Language[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    const loadLanguages = async () => {
      try {
        setIsLoading(true);
        console.log('üåç –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —è–∑—ã–∫–∞—Ö –∏–∑ API...');
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ —Å–µ—Ä–≤–∏—Å, —á—Ç–æ –∏ –≤ useLanguages
        const response = await LanguagesService.getLanguages();
        
        if (response.success && response.languages.length > 0) {
          // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —è–∑—ã–∫–∏ –∏–∑ –ë–î –≤ —Ñ–æ—Ä–º–∞—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏ —É–±–µ–∂–¥–∞–µ–º—Å—è –≤ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ –∫–æ–¥–æ–≤
          const uniqueLanguages = new Map();
          
          // –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ —è–∑—ã–∫–∏ –≤ Map –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
          response.languages.forEach(dbLang => {
            // –ï—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å —è–∑—ã–∫ —Å —Ç–∞–∫–∏–º iso_code, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤–µ—Ä—Å–∏—é —Å –Ω–∞–∏–≤—ã—Å—à–∏–º id (—Å–∞–º—É—é —Å–≤–µ–∂—É—é)
            const existingLang = uniqueLanguages.get(dbLang.iso_code);
            if (!existingLang || dbLang.id > existingLang.id) {
              uniqueLanguages.set(dbLang.iso_code, dbLang);
            }
          });
          
          // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —è–∑—ã–∫–∏ –∏–∑ Map –≤ –º–∞—Å—Å–∏–≤
          const appLanguages = Array.from(uniqueLanguages.values())
            .map(mapDbLanguageToAppLanguage);
            
          console.log(`üåç –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${appLanguages.length} —è–∑—ã–∫–æ–≤`);
          console.log('üåç –ö–æ–¥—ã —è–∑—ã–∫–æ–≤:', appLanguages.map(l => l.code).join(', '));
          
          setLanguages(appLanguages);
        } else {
          console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —è–∑—ã–∫–∏:', response.error);
          setError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ —è–∑—ã–∫–æ–≤');
        }
      } catch (err) {
        console.error('üö® –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —è–∑—ã–∫–æ–≤:', err);
        setError(err instanceof Error ? err.message : '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —è–∑—ã–∫–æ–≤');
      } finally {
        setIsLoading(false);
      }
    };

    // –ó–∞–≥—Ä—É–∂–∞–µ–º —è–∑—ã–∫–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∏ –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã
    if (languages.length === 0) {
      loadLanguages();
    }
  }, [languages.length]);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–º–µ–Ω–∏ —è–∑—ã–∫–∞ –ø–æ –∫–æ–¥—É
  const getLanguageName = (code: string): string => {
    if (!code) return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —è–∑—ã–∫';
    
    console.log(`üîç –ò—â–µ–º —è–∑—ã–∫ –ø–æ –∫–æ–¥—É: "${code}" —Å—Ä–µ–¥–∏ ${languages.length} —è–∑—ã–∫–æ–≤`);
    
    // –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ (—Å —É—á–µ—Ç–æ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞)
    const exactMatch = languages.find(lang => 
      lang.code.toLowerCase() === code.toLowerCase()
    );
    
    if (exactMatch) {
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –¥–ª—è "${code}": ${exactMatch.name}`);
      return exactMatch.name;
    }
    
    // –ï—Å–ª–∏ –∫–æ–¥ –∏–º–µ–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, en-US, en-AA), 
    // –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –æ—Å–Ω–æ–≤–Ω—É—é —á–∞—Å—Ç—å –∫–æ–¥–∞ –¥–æ –¥–µ—Ñ–∏—Å–∞
    const baseLangCode = code.split('-')[0].toLowerCase();
    console.log(`üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–¥ —è–∑—ã–∫–∞: "${baseLangCode}"`);
    
    // –ò—â–µ–º –ø–æ –±–∞–∑–æ–≤–æ–º—É –∫–æ–¥—É (en –∏–∑ en-IE)
    const baseMatch = languages.find(lang => 
      lang.code.toLowerCase() === baseLangCode || 
      lang.code.split('-')[0].toLowerCase() === baseLangCode
    );
    
    if (baseMatch) {
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ –æ—Å–Ω–æ–≤–Ω–æ–º—É –∫–æ–¥—É: ${baseMatch.name}`);
      return baseMatch.name;
    }
    
    console.log(`‚ùå –Ø–∑—ã–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –∫–æ–¥–∞: "${code}"`);
    return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —è–∑—ã–∫';
  };

  const value = {
    languages,
    isLoading,
    error,
    getLanguageName
  };

  return (
    <LanguageContext.Provider value={value}>
      {children}
    </LanguageContext.Provider>
  );
};

// –•—É–∫ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —è–∑—ã–∫–æ–≤
export const useLanguageContext = (): LanguageContextType => {
  const context = useContext(LanguageContext);
  if (context === undefined) {
    throw new Error('useLanguageContext must be used within a LanguageProvider');
  }
  return context;
};