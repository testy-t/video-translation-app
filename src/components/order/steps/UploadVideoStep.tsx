import React, { useState, useRef, useEffect } from "react";
import Icon from "@/components/ui/icon";
import { supabase } from "@/integrations/supabase";
import { Button } from "@/components/ui/button";
import { toast } from "@/components/ui/use-toast";

interface UploadVideoStepProps {
  videoFile: File | null;
  setVideoFile: (file: File | null) => void;
  transactionId?: string | null;
  onUploadSuccess?: (videoId: number, fileKey: string) => void;
}

const UploadVideoStep: React.FC<UploadVideoStepProps> = ({
  videoFile,
  setVideoFile,
  transactionId,
  onUploadSuccess
}) => {
  const [isDragging, setIsDragging] = useState(false);
  const fileInputRef = useRef<HTMLInputElement>(null);
  const [videoSrc, setVideoSrc] = useState<string | null>(null);
  const [isLoading, setIsLoading] = useState(false);
  const [isPreparingUpload, setIsPreparingUpload] = useState(false);
  const [uploadProgress, setUploadProgress] = useState(0);
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–ª–∞–≥ –∑–∞–≥—Ä—É–∑–∫–∏, –ø—Ä–æ–≤–µ—Ä—è—è localStorage –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  const [isVideoUploaded, setIsVideoUploaded] = useState(() => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä—è–º–æ–π —Ñ–ª–∞–≥ –∑–∞–≥—Ä—É–∑–∫–∏
    const flagUploaded = localStorage.getItem('isVideoUploaded') === 'true';
    
    // –ö–∞–∫ –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–º –≤–∏–¥–µ–æ
    const savedVideoId = localStorage.getItem('uploadedVideoId');
    const savedFileKey = localStorage.getItem('uploadedFileKey');
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º true, –µ—Å–ª–∏ –ª—é–±–∞—è –∏–∑ –ø—Ä–æ–≤–µ—Ä–æ–∫ —É—Å–ø–µ—à–Ω–∞
    return flagUploaded || !!(savedVideoId && savedFileKey);
  });

  // Handle file selection
  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    console.log("üìä File selection triggered", e.target.files);
    const files = e.target.files;
    if (files && files[0]) {
      console.log("üìä File selected:", files[0].name);
      // Create URL for video preview
      const fileUrl = URL.createObjectURL(files[0]);
      setVideoSrc(fileUrl);
      setVideoFile(files[0]);
      
      // Start upload automatically
      // Use setTimeout to give UI time to update
      console.log("üìä Scheduling upload...");
      setTimeout(() => {
        console.log("üìä Starting upload from file selection handler");
        uploadVideo();
      }, 100);
    } else {
      console.log("üìä No file selected in file input");
    }
  };

  // Handle drag and drop
  const handleDragOver = (e: React.DragEvent<HTMLDivElement>) => {
    e.preventDefault();
    setIsDragging(true);
  };

  const handleDragLeave = () => {
    setIsDragging(false);
  };

  const handleDrop = (e: React.DragEvent<HTMLDivElement>) => {
    e.preventDefault();
    setIsDragging(false);
    console.log("üìä File dropped", e.dataTransfer.files);

    const files = e.dataTransfer.files;
    if (files && files[0]) {
      console.log("üìä Checking dropped file:", files[0].name, files[0].type);
      // Check if file is a video
      if (files[0].type.startsWith("video/")) {
        console.log("üìä Video file dropped:", files[0].name);
        const fileUrl = URL.createObjectURL(files[0]);
        setVideoSrc(fileUrl);
        setVideoFile(files[0]);
        
        // Start upload automatically
        // Use setTimeout to give UI time to update
        console.log("üìä Scheduling upload for dropped file...");
        setTimeout(() => {
          console.log("üìä Starting upload from drop handler");
          uploadVideo();
        }, 100);
      } else {
        console.log("üìä Dropped file is not a video:", files[0].type);
        toast({
          title: "–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ñ–æ—Ä–º–∞—Ç",
          description: "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥–µ–æ—Ñ–∞–π–ª",
          variant: "destructive",
        });
      }
    } else {
      console.log("üìä No file in drop event");
    }
  };

  // Clear selected file and remove data from localStorage
  const clearSelection = () => {
    if (videoSrc) {
      URL.revokeObjectURL(videoSrc);
    }
    setVideoSrc(null);
    setVideoFile(null);
    if (fileInputRef.current) {
      fileInputRef.current.value = "";
    }
    setUploadProgress(0);
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ –∏ —É–¥–∞–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ localStorage
    setIsVideoUploaded(false);
    localStorage.removeItem('isVideoUploaded');
    localStorage.removeItem('uploadedVideoId');
    localStorage.removeItem('uploadedFileKey');
  };

  // Upload video using presigned URL from Supabase Edge Function
  const uploadVideo = async () => {
    console.log("üìä uploadVideo called, videoFile status:", videoFile ? "Selected" : "Not selected");
    
    if (!videoFile) {
      console.error("üìä No video file selected when uploadVideo was called!");
      
      // Try to check if there's a file in the file input as a fallback
      const fileInput = fileInputRef.current;
      if (fileInput && fileInput.files && fileInput.files[0]) {
        console.log("üìä Found file in file input, using it as fallback");
        const file = fileInput.files[0];
        setVideoFile(file);
        
        // Wait a moment and retry
        setTimeout(() => {
          console.log("üìä Retrying upload with file from input:", file.name);
          uploadVideo();
        }, 100);
        return;
      }
      
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: "–ù–µ –≤—ã–±—Ä–∞–Ω —Ñ–∞–π–ª",
        variant: "destructive",
      });
      return;
    }

    console.log("üìä Starting upload for:", videoFile.name, "Size:", videoFile.size, "Type:", videoFile.type);
    setIsLoading(true);
    setIsPreparingUpload(true); // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏–Ω–Ω–µ—Ä –Ω–∞ —ç—Ç–∞–ø–µ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏
    setUploadProgress(0);

    try {
      // Get session and token
      const { data: { session } } = await supabase.auth.getSession();
      console.log("üìä Auth status:", session ? "Authenticated" : "Not authenticated");
      console.log("üìä Transaction ID:", transactionId || "None");
      
      let videoId, fileKey, presignedUrl;
      
      // Demo mode disabled - using real Edge Function for all uploads
      const FORCE_DEMO_MODE = false;

      // For demo mode or unauthenticated users
      if (FORCE_DEMO_MODE || (!session && !transactionId)) {
        console.log("üìä Running in demo mode");
        
        // Delay to show progress
        await new Promise(resolve => setTimeout(resolve, 2000));
        
        // Generate dummy video ID and file key
        videoId = Math.floor(Math.random() * 1000);
        fileKey = `demo/${Date.now()}-${videoFile.name}`;
        
        console.log("üìä Demo upload completed:", { videoId, fileKey });
      } else {
        console.log("üìä Running real upload with presigned URL");
        
        // Step 1: Request a presigned URL from the Edge Function
        const effectiveTransactionId = transactionId || `temp-${Date.now()}`;
        
        // Prepare JSON data for requesting presigned URL
        const requestData = {
          fileName: videoFile.name,
          fileType: videoFile.type,
          transactionId: effectiveTransactionId
        };
        
        console.log("üìä Requesting presigned URL:", requestData);

        // Manually construct the URL for the Supabase Edge Function
        const projectRef = 'tbgwudnxjwplqtkjihxc';
        const supabaseUrl = `https://${projectRef}.supabase.co/functions/v1/video-upload`;
        console.log("üìä Edge function URL:", supabaseUrl);
        
        // Create headers for JSON request
        const headers: HeadersInit = {
          'Content-Type': 'application/json'
        };
        
        // Add Authorization header if session exists
        if (session) {
          headers.Authorization = `Bearer ${session.access_token}`;
        }
        
        // Request presigned URL
        console.log("üìä Sending request for presigned URL");
        const presignedResponse = await fetch(supabaseUrl, {
          method: 'POST',
          headers,
          body: JSON.stringify(requestData)
        });
        
        console.log("üìä Presigned URL response status:", presignedResponse.status);
        const responseText = await presignedResponse.text();
        console.log("üìä Presigned URL response text:", responseText);
        
        let result;
        try {
          // Try to parse as JSON
          result = JSON.parse(responseText);
        } catch (e) {
          console.error("üìä Failed to parse response as JSON:", e);
          throw new Error("–ü–æ–ª—É—á–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞");
        }

        if (!presignedResponse.ok) {
          throw new Error(result.error || '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è URL –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏');
        }

        // Extract the presigned URL and file key
        presignedUrl = result.presignedUrl;
        fileKey = result.fileKey;
        videoId = result.videoId;
        
        if (!presignedUrl) {
          throw new Error('–ù–µ –ø–æ–ª—É—á–µ–Ω URL –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞');
        }
        
        console.log("üìä Got presigned URL:", presignedUrl);
        console.log("üìä File key:", fileKey);
        
        // Step 2: Upload the file directly to storage using the presigned URL
        console.log("üìä Starting direct upload to storage with presigned URL");
        
        // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è —Å –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –Ω–∞ –∞–∫—Ç–∏–≤–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É
        setIsPreparingUpload(false);
        
        // For tracking upload progress with XMLHttpRequest
        const xhr = new XMLHttpRequest();
        
        // Set up promise to track upload completion
        const uploadPromise = new Promise<void>((resolve, reject) => {
          xhr.upload.addEventListener('progress', (event) => {
            if (event.lengthComputable) {
              const percentComplete = Math.round((event.loaded / event.total) * 100);
              console.log("üìä Upload progress:", percentComplete, "%");
              setUploadProgress(Math.min(percentComplete, 95)); // Max at 95% until fully confirmed
            }
          });
          
          xhr.addEventListener('load', () => {
            if (xhr.status >= 200 && xhr.status < 300) {
              console.log("üìä Upload to storage completed successfully");
              resolve();
            } else {
              console.error("üìä Upload to storage failed:", xhr.status, xhr.statusText);
              reject(new Error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: ${xhr.status} ${xhr.statusText}`));
            }
          });
          
          xhr.addEventListener('error', () => {
            console.error("üìä Upload to storage failed with network error");
            reject(new Error('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞'));
          });
          
          xhr.addEventListener('abort', () => {
            console.warn("üìä Upload to storage aborted");
            reject(new Error('–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞'));
          });
        });
        
        // Start the upload
        xhr.open('PUT', presignedUrl);
        xhr.setRequestHeader('Content-Type', videoFile.type);
        xhr.send(videoFile);
        
        // Wait for upload to complete
        await uploadPromise;
        
        console.log("üìä Direct upload successful");
      }
      
      // Set progress to 100%
      setUploadProgress(100);
      setIsPreparingUpload(false); // –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
      
      // –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ –≤–∏–¥–µ–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —ç—Ç–æ –≤ localStorage
      setIsVideoUploaded(true);
      localStorage.setItem('isVideoUploaded', 'true');
      
      toast({
        title: "–£—Å–ø–µ—Ö",
        description: "–í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ",
      });

      // –ü–æ—Å–ª–µ –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –∏ —É—Å–ø–µ—à–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É —á–µ—Ä–µ–∑ callback
      setTimeout(() => {
        // Call onUploadSuccess callback with the video data
        if (onUploadSuccess) {
          console.log("üìä Calling onUploadSuccess with:", { videoId, fileKey });
          onUploadSuccess(videoId, fileKey);
        }
      }, 500); // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–≤–∏–¥–µ–ª 100% –∑–∞–≥—Ä—É–∑–∫–∏
    } catch (error) {
      console.error("üìä Upload error:", error);
      setIsVideoUploaded(false); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –ø—Ä–∏ –æ—à–∏–±–∫–µ
      toast({
        title: "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏",
        description: error instanceof Error ? error.message : "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–∏–¥–µ–æ",
        variant: "destructive",
      });
    } finally {
      setIsLoading(false);
      setIsPreparingUpload(false);
    }
  };

  // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  useEffect(() => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –≤–∏–¥–µ–æ
    const savedVideoId = localStorage.getItem('uploadedVideoId');
    const savedFileKey = localStorage.getItem('uploadedFileKey');
    
    console.log("üìä Checking for saved video:", { savedVideoId, savedFileKey, videoFile });
    
    // –ï—Å–ª–∏ –≤ localStorage –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–º –≤–∏–¥–µ–æ, –Ω–æ –Ω–µ—Ç —Å–∞–º–æ–≥–æ —Ñ–∞–π–ª–∞
    if (savedVideoId && savedFileKey && !videoFile) {
      console.log("üìä Found saved video data, setting uploaded state", savedVideoId, savedFileKey);
      // –ü–æ–º–µ—á–∞–µ–º –≤–∏–¥–µ–æ –∫–∞–∫ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ, –Ω–æ –±–µ–∑ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–∞–º–æ–≥–æ —Ñ–∞–π–ª–∞ (–µ–≥–æ –Ω–µ—Ç –≤ –ø–∞–º—è—Ç–∏)
      setIsVideoUploaded(true);
    }
  }, [videoFile]);

  // Check component props and start upload when videoFile becomes available
  useEffect(() => {
    console.log("üìä UploadVideoStep props changed:", { 
      videoFile: videoFile?.name, 
      transactionId, 
      isVideoUploaded,
      uploadProgress
    });
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–∏–¥–µ–æ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏:
    // 1. –ï—Å—Ç—å —Ñ–∞–π–ª –≤–∏–¥–µ–æ
    // 2. –ù–µ –∏–¥–µ—Ç –∑–∞–≥—Ä—É–∑–∫–∞ –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç
    // 3. –ü—Ä–æ–≥—Ä–µ—Å—Å –∑–∞–≥—Ä—É–∑–∫–∏ 0 (–Ω–µ –Ω–∞—á–∞—Ç–∞)
    // 4. –í–∏–¥–µ–æ –µ—â–µ –Ω–µ –±—ã–ª–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ —Ä–∞–Ω–µ–µ
    if (videoFile && !isLoading && uploadProgress === 0 && !isVideoUploaded) {
      console.log("üìä VideoFile detected in component, starting upload automatically");
      // Use setTimeout to avoid immediate upload that might conflict with state updates
      setTimeout(() => {
        uploadVideo();
      }, 300);
    }
  }, [videoFile, transactionId, isLoading, uploadProgress, isVideoUploaded]);

  return (
    <div className="fade-slide-in">
      <h2 className="text-xl font-semibold mb-6">–ó–∞–≥—Ä—É–∑–∏—Ç–µ –≤–∞—à–µ –≤–∏–¥–µ–æ</h2>

      {!videoFile && !isVideoUploaded ? (
        <div
          className={`border-2 border-dashed rounded-lg p-10 text-center cursor-pointer transition-all
            ${isDragging ? "border-primary bg-primary/5" : "border-gray-300 hover:border-primary/70"}`}
          onClick={() => fileInputRef.current?.click()}
          onDragOver={handleDragOver}
          onDragLeave={handleDragLeave}
          onDrop={handleDrop}
        >
          <input
            type="file"
            ref={fileInputRef}
            onChange={handleFileChange}
            accept="video/*"
            className="hidden"
          />

          <div className="flex flex-col items-center">
            <Icon name="Upload" size={48} className="text-gray-400 mb-4" />
            <p className="text-lg font-medium mb-2">
              –ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ –≤–∏–¥–µ–æ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –¥–ª—è –≤—ã–±–æ—Ä–∞
            </p>
            <p className="text-gray-500 text-sm">
              –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ñ–æ—Ä–º–∞—Ç—ã: MP4, AVI, MOV, MKV (–¥–æ 2GB)
            </p>
          </div>
        </div>
      ) : (
        <div className="border rounded-lg p-6 bg-gray-50 fade-slide-in">
          {isLoading ? (
            <div className="flex flex-col items-center justify-center py-10">
              {isPreparingUpload ? (
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Å–ø–∏–Ω–Ω–µ—Ä –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –∑–∞–≥—Ä—É–∑–∫–∏
                <>
                  <Icon
                    name="Loader2"
                    className="animate-spin text-primary h-10 w-10 mb-4"
                  />
                  <p className="text-center text-gray-600">–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∑–∞–≥—Ä—É–∑–∫–µ...</p>
                </>
              ) : (
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –ø—Ä–∏ –∞–∫—Ç–∏–≤–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–µ
                <>
                  <Icon
                    name="UploadCloud"
                    className="text-primary h-10 w-10 mb-4"
                  />
                  <p className="text-center text-gray-600">–ó–∞–≥—Ä—É–∑–∫–∞ –≤–∏–¥–µ–æ...</p>
                  <div className="w-full max-w-xs mt-4">
                    <div className="bg-gray-200 rounded-full h-2.5">
                      <div 
                        className="bg-primary h-2.5 rounded-full transition-all duration-300" 
                        style={{ width: `${uploadProgress}%` }}
                      ></div>
                    </div>
                    <p className="text-xs text-gray-500 mt-1 text-center">
                      {uploadProgress}%
                    </p>
                  </div>
                </>
              )}
            </div>
          ) : (
            <>
              <div className="flex justify-between items-center mb-4">
                <h3 className="font-medium text-lg">–í—ã–±—Ä–∞–Ω–Ω–æ–µ –≤–∏–¥–µ–æ</h3>
                <button
                  onClick={clearSelection}
                  className="text-gray-500 hover:text-red-500 transition-colors"
                >
                  <Icon name="X" size={20} />
                </button>
              </div>

              {/* –ï—Å–ª–∏ —Ñ–∞–π–ª –µ—Å—Ç—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–µ–º */}
              {videoFile ? (
                <div className="flex items-center bg-white p-4 rounded-md border">
                  <Icon
                    name="FileVideo"
                    className="text-primary mr-2"
                    size={24}
                  />
                  <div className="flex-grow">
                    <div className="font-medium">{videoFile.name}</div>
                    <div className="text-gray-500 text-sm">
                      –†–∞–∑–º–µ—Ä: {Math.round((videoFile.size / 1024 / 1024) * 10) / 10} MB
                      {isVideoUploaded ? (
                        // –ï—Å–ª–∏ –≤–∏–¥–µ–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ
                        <span className="text-green-500 ml-2 flex items-center inline-flex">
                          <Icon name="Check" size={14} className="mr-1" /> 
                          –ó–∞–≥—Ä—É–∂–µ–Ω–æ
                        </span>
                      ) : (
                        // –ï—Å–ª–∏ –≤–∏–¥–µ–æ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞
                        <Button 
                          variant="link" 
                          size="sm"
                          className="text-xs text-primary p-0 ml-2"
                          onClick={uploadVideo}
                        >
                          –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É
                        </Button>
                      )}
                    </div>
                  </div>
                </div>
              ) : (
                /* –ï—Å–ª–∏ —Ñ–∞–π–ª–∞ –Ω–µ—Ç, –Ω–æ –æ–Ω –±—ã–ª –∑–∞–≥—Ä—É–∂–µ–Ω —Ä–∞–Ω–µ–µ (–ø–æ –¥–∞–Ω–Ω—ã–º –∏–∑ localStorage) */
                <div className="flex items-center bg-white p-4 rounded-md border">
                  <Icon
                    name="FileVideo"
                    className="text-primary mr-2"
                    size={24}
                  />
                  <div className="flex-grow">
                    <div className="font-medium">–í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ</div>
                    <div className="text-gray-500 text-sm">
                      <span className="text-green-500 flex items-center">
                        <Icon name="Check" size={14} className="mr-1" /> 
                        –§–∞–π–ª —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
                      </span>
                    </div>
                  </div>
                </div>
              )}

              {/* –ö–Ω–æ–ø–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤ —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–µ—Ç */}
              {!isLoading && !isVideoUploaded && uploadProgress === 0 && (
                <div className="mt-4">
                  <Button 
                    className="w-full" 
                    onClick={uploadVideo}
                    disabled={!videoFile || isLoading}
                  >
                    <Icon name="Upload" className="mr-2 h-4 w-4" />
                    –ó–∞–≥—Ä—É–∑–∏—Ç—å –≤–∏–¥–µ–æ
                  </Button>
                </div>
              )}
              
              {/* –ï—Å–ª–∏ –≤–∏–¥–µ–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ */}
              {isVideoUploaded && !isLoading && (
                <div className="mt-4">
                  <div className="flex items-center justify-center text-sm text-green-600 bg-green-50 p-2 rounded-md border border-green-200">
                    <Icon name="CheckCircle" className="mr-2 h-4 w-4" />
                    –í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –∏ –≥–æ—Ç–æ–≤–æ –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ
                  </div>
                </div>
              )}
              
              {/* –ö–Ω–æ–ø–∫–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥—Ä—É–≥–æ–≥–æ –≤–∏–¥–µ–æ, –µ—Å–ª–∏ —Ç–µ–∫—É—â–µ–µ —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ */}
              {isVideoUploaded && !videoFile && (
                <div className="mt-4">
                  <Button 
                    variant="outline" 
                    onClick={() => {
                      clearSelection();
                      // –î–∞–≤–∞–π—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤—ã–±—Ä–∞—Ç—å –Ω–æ–≤—ã–π —Ñ–∞–π–ª
                      setTimeout(() => fileInputRef.current?.click(), 100);
                    }}
                    className="w-full"
                  >
                    <Icon name="RefreshCw" className="mr-2 h-4 w-4" />
                    –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–µ –≤–∏–¥–µ–æ
                  </Button>
                </div>
              )}
            </>
          )}
        </div>
      )}

      <div className="mt-6">
        <h3 className="font-medium mb-3">–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</h3>
        <ul className="space-y-2 text-gray-600">
          <li className="flex items-start">
            <Icon
              name="Check"
              className="text-green-500 mt-1 mr-2 flex-shrink-0"
              size={16}
            />
            <span>
              –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–∏–¥–µ–æ —Ö–æ—Ä–æ—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–ª—è –ª—É—á—à–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            </span>
          </li>
          <li className="flex items-start">
            <Icon
              name="Check"
              className="text-green-500 mt-1 mr-2 flex-shrink-0"
              size={16}
            />
            <span>–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ä–µ—á—å –≥–æ–≤–æ—Ä—è—â–µ–≥–æ —á–µ—Ç–∫–æ —Å–ª—ã—à–Ω–∞</span>
          </li>
          <li className="flex items-start">
            <Icon
              name="Check"
              className="text-green-500 mt-1 mr-2 flex-shrink-0"
              size={16}
            />
            <span>–û–ø—Ç–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–∏–¥–µ–æ ‚Äî –¥–æ 30 –º–∏–Ω—É—Ç</span>
          </li>
        </ul>
      </div>
    </div>
  );
};

export default UploadVideoStep;