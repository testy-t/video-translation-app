
import { useState, useMemo, useEffect } from 'react';
import { UseLanguagesResult, Language as LangType } from '../types';
import { AVAILABLE_LANGUAGES } from '../languages-data';
import { LanguagesService, Language as DbLanguage } from '@/integrations/supabase';

/**
 * –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –æ–±—ä–µ–∫—Ç —è–∑—ã–∫–∞ –∏–∑ –ë–î –≤ —Ñ–æ—Ä–º–∞—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–π –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
 */
const mapDbLanguageToAppLanguage = (dbLang: DbLanguage): LangType => ({
  code: dbLang.iso_code,
  name: dbLang.ru_name,
  flag: dbLang.flag_emoji || 'üåê',
  popular: false, // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤—Å–µ —è–∑—ã–∫–∏ –Ω–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ
});

/**
 * –•—É–∫ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∏ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ —è–∑—ã–∫–æ–≤
 * @param initialSearchTerm –ù–∞—á–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
 * @param videoId ID –≤–∏–¥–µ–æ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —è–∑—ã–∫–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
 * @returns –û–±—ä–µ–∫—Ç —Å –º–µ—Ç–æ–¥–∞–º–∏ –∏ –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —è–∑—ã–∫–∞–º–∏
 */
export const useLanguages = (
  initialSearchTerm: string = '',
  videoId?: number
): UseLanguagesResult & {
  searchTerm: string;
  setSearchTerm: (term: string) => void;
  isLoading: boolean;
  error: string | null;
  selectedDbLanguage: DbLanguage | null;
  setSelectedLanguage: (languageCode: string) => void;
  updateVideoLanguage: () => Promise<boolean>;
} => {
  const [searchTerm, setSearchTerm] = useState(initialSearchTerm);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [languages, setLanguages] = useState<LangType[]>(AVAILABLE_LANGUAGES);
  const [dbLanguages, setDbLanguages] = useState<DbLanguage[]>([]);
  const [selectedLanguageCode, setSelectedLanguageCode] = useState<string>('');
  const [selectedDbLanguage, setSelectedDbLanguage] = useState<DbLanguage | null>(null);

  // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ —è–∑—ã–∫–æ–≤ –∏–∑ API
  useEffect(() => {
    const fetchLanguages = async () => {
      setIsLoading(true);
      setError(null);

      try {
        const response = await LanguagesService.getLanguages();
        
        if (response.success && response.languages.length > 0) {
          // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —è–∑—ã–∫–∏ –∏–∑ –ë–î –≤ —Ñ–æ—Ä–º–∞—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏ —É–±–µ–∂–¥–∞–µ–º—Å—è –≤ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ –∫–æ–¥–æ–≤
          const uniqueLanguages = new Map();
          
          // –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ —è–∑—ã–∫–∏ –≤ Map –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
          response.languages.forEach(dbLang => {
            // –ï—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å —è–∑—ã–∫ —Å —Ç–∞–∫–∏–º iso_code, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤–µ—Ä—Å–∏—é —Å –Ω–∞–∏–≤—ã—Å—à–∏–º id (—Å–∞–º—É—é —Å–≤–µ–∂—É—é)
            const existingLang = uniqueLanguages.get(dbLang.iso_code);
            if (!existingLang || dbLang.id > existingLang.id) {
              uniqueLanguages.set(dbLang.iso_code, dbLang);
            }
          });
          
          // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —è–∑—ã–∫–∏ –∏–∑ Map –≤ –º–∞—Å—Å–∏–≤
          const appLanguages = Array.from(uniqueLanguages.values())
            .map(mapDbLanguageToAppLanguage);
          
          // –û—Ç–º–µ—á–∞–µ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —è–∑—ã–∫–∏ (–∞–Ω–≥–ª–∏–π—Å–∫–∏–π, —Ä—É—Å—Å–∫–∏–π, –∏—Å–ø–∞–Ω—Å–∫–∏–π, –∫–∏—Ç–∞–π—Å–∫–∏–π)
          const popularCodes = ['en', 'ru', 'es', 'zh'];
          appLanguages.forEach(lang => {
            if (popularCodes.includes(lang.code)) {
              lang.popular = true;
            }
          });
          
          setLanguages(appLanguages);
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —è–∑—ã–∫–∏ –≤ dbLanguages
          setDbLanguages(Array.from(uniqueLanguages.values()));
        } else {
          // –ï—Å–ª–∏ API –Ω–µ –≤–µ—Ä–Ω—É–ª –¥–∞–Ω–Ω—ã–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É
          setLanguages(AVAILABLE_LANGUAGES);
          
          if (response.error) {
            console.warn('–ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É –¥–ª—è —è–∑—ã–∫–æ–≤ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ API:', response.error);
            setError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ —è–∑—ã–∫–æ–≤');
          }
        }
      } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —è–∑—ã–∫–æ–≤:', err);
        setError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ —è–∑—ã–∫–æ–≤');
        setLanguages(AVAILABLE_LANGUAGES);
      } finally {
        setIsLoading(false);
      }
    };

    fetchLanguages();
  }, []);

  // –°–ª–µ–¥–∏–º –∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç –∏–∑ –ë–î
  useEffect(() => {
    if (selectedLanguageCode && dbLanguages.length > 0) {
      const dbLang = dbLanguages.find(lang => lang.iso_code === selectedLanguageCode) || null;
      setSelectedDbLanguage(dbLang);
    } else {
      setSelectedDbLanguage(null);
    }
  }, [selectedLanguageCode, dbLanguages]);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —è–∑—ã–∫–∞ –≤–∏–¥–µ–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
  const updateVideoLanguage = async (): Promise<boolean> => {
    console.log("–í—ã–∑–æ–≤ updateVideoLanguage —Å:", { videoId, selectedLanguageCode, selectedDbLanguage });
    
    if (!videoId) {
      setError('–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ID –≤–∏–¥–µ–æ');
      console.error("–û—à–∏–±–∫–∞ updateVideoLanguage: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ID –≤–∏–¥–µ–æ");
      return false;
    }
    
    if (!selectedDbLanguage) {
      // –ï—Å–ª–∏ –Ω–µ—Ç –æ–±—ä–µ–∫—Ç–∞ —è–∑—ã–∫–∞, –Ω–æ –µ—Å—Ç—å –∫–æ–¥, –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –µ–≥–æ –≤ —Å–ø–∏—Å–∫–µ
      if (selectedLanguageCode && dbLanguages.length > 0) {
        const dbLang = dbLanguages.find(lang => lang.iso_code === selectedLanguageCode);
        if (dbLang) {
          console.log("–ù–∞–π–¥–µ–Ω —è–∑—ã–∫ –≤ dbLanguages –¥–ª—è –∫–æ–¥–∞:", selectedLanguageCode, dbLang);
          setSelectedDbLanguage(dbLang);
          
          // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–π —è–∑—ã–∫
          try {
            const result = await LanguagesService.updateVideoLanguage(videoId, dbLang);
            if (result.success) {
              console.log('–Ø–∑—ã–∫ –≤–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω (–∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç):', result);
              return true;
            }
          } catch (err) {
            console.error("–û—à–∏–±–∫–∞ –∑–∞–ø–∞—Å–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞:", err);
          }
        }
      }
      
      setError('–ù–µ –≤—ã–±—Ä–∞–Ω —è–∑—ã–∫ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞');
      console.error("–û—à–∏–±–∫–∞ updateVideoLanguage: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—ä–µ–∫—Ç —è–∑—ã–∫–∞, –∫–æ–¥:", selectedLanguageCode);
      return false;
    }

    setIsLoading(true);
    setError(null);

    try {
      const result = await LanguagesService.updateVideoLanguage(videoId, selectedDbLanguage);
      
      if (result.success) {
        console.log('–Ø–∑—ã–∫ –≤–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω:', result);
        return true;
      } else {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —è–∑—ã–∫–∞ –≤–∏–¥–µ–æ:', result.error);
        setError(result.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —è–∑—ã–∫ –≤–∏–¥–µ–æ');
        return false;
      }
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —è–∑—ã–∫–∞ –≤–∏–¥–µ–æ:', err);
      setError('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —è–∑—ã–∫–∞ –≤–∏–¥–µ–æ');
      return false;
    } finally {
      setIsLoading(false);
    }
  };

  // –í—ã—á–∏—Å–ª—è–µ–º—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∏ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ —è–∑—ã–∫–æ–≤
  const result = useMemo(() => {
    // –§–∏–ª—å—Ç—Ä—É–µ–º —è–∑—ã–∫–∏ –ø–æ –ø–æ–∏—Å–∫–æ–≤–æ–º—É –∑–∞–ø—Ä–æ—Å—É
    const filteredLanguages = languages.filter(
      lang => lang.name.toLowerCase().includes(searchTerm.toLowerCase())
    );
    
    // –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –∏ –æ—Å—Ç–∞–ª—å–Ω—ã–µ
    const popularLanguages = filteredLanguages.filter(lang => lang.popular);
    const otherLanguages = filteredLanguages.filter(lang => !lang.popular);

    return {
      allLanguages: languages,
      filteredLanguages,
      popularLanguages,
      otherLanguages
    };
  }, [searchTerm, languages]);

  return {
    ...result,
    searchTerm,
    setSearchTerm,
    isLoading,
    error,
    selectedDbLanguage,
    setSelectedLanguage: setSelectedLanguageCode,
    updateVideoLanguage
  };
};
