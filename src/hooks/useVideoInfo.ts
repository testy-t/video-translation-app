import { useState, useEffect } from "react";
import { supabase } from "@/integrations/supabase";
import { getLanguageName } from "@/components/order/language-selector/languages-data";

interface VideoInfo {
  id: number;
  duration: number;
  outputLanguage: string;
  outputLanguageName: string;
  status: string;
}

/**
 * –•—É–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∏–¥–µ–æ –∏–∑ API
 * @param videoId ID –≤–∏–¥–µ–æ
 * @param fileKey –ö–ª—é—á —Ñ–∞–π–ª–∞
 * @param forceUpdate –ß–∏—Å–ª–æ, —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã–∑–æ–≤–µ—Ç –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
 * @returns –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∏–¥–µ–æ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
 */
export const useVideoInfo = (
  videoId?: number | null, 
  fileKey?: string | null,
  forceUpdate: number = 0
) => {
  const [videoInfo, setVideoInfo] = useState<VideoInfo | null>(null);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    console.log(`üîÑ –í—ã–∑–≤–∞–Ω useVideoInfo (forceUpdate=${forceUpdate})`);
    // –ï—Å–ª–∏ –Ω–µ—Ç ID –≤–∏–¥–µ–æ –∏–ª–∏ –∫–ª—é—á–∞ —Ñ–∞–π–ª–∞, –Ω–µ –∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    if (!videoId || !fileKey) {
      console.log('‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∏–¥–µ–æ', { videoId, fileKey });
      return;
    }
    
    console.log('üîÑ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∏–¥–µ–æ', { videoId, fileKey });

    const fetchVideoInfo = async () => {
      try {
        setIsLoading(true);
        setError(null);

        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const { data: { session } } = await supabase.auth.getSession();
        if (!session) {
          throw new Error("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω");
        }

        // –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é video-info
        const response = await fetch(`${import.meta.env.VITE_SUPABASE_URL}/functions/v1/video-info`, {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
            "Authorization": `Bearer ${session.access_token}`
          },
          body: JSON.stringify({
            videoId,
            fileKey,
            outputLanguage: localStorage.getItem("selectedLanguage") || "en"
          })
        });

        if (!response.ok) {
          const errorData = await response.json();
          throw new Error(errorData.error || "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ");
        }

        const data = await response.json();
        console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ –≤–∏–¥–µ–æ –∏–∑ API:', data);
        
        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç VideoInfo
        const videoData = {
          id: data.videoId,
          duration: data.duration || 180, // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 3 –º–∏–Ω—É—Ç—ã
          outputLanguage: data.outputLanguage || localStorage.getItem("selectedLanguage") || "en",
          outputLanguageName: getLanguageName(data.outputLanguage || localStorage.getItem("selectedLanguage") || "en"),
          status: data.status || "uploaded"
        };
        
        console.log('‚úÖ –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –≤–∏–¥–µ–æ:', videoData);
        setVideoInfo(videoData);
      } catch (err) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∏–¥–µ–æ:", err);
        setError(err instanceof Error ? err.message : "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞");
        
        // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ localStorage
        const savedDuration = localStorage.getItem("videoDuration");
        const savedLanguage = localStorage.getItem("selectedLanguage");
        
        setVideoInfo({
          id: videoId,
          duration: savedDuration ? parseInt(savedDuration) : 180,
          outputLanguage: savedLanguage || "en",
          outputLanguageName: getLanguageName(savedLanguage || "en"),
          status: "uploaded"
        });
      } finally {
        setIsLoading(false);
      }
    };

    fetchVideoInfo();
  }, [videoId, fileKey, forceUpdate]);

  return { videoInfo, isLoading, error };
};